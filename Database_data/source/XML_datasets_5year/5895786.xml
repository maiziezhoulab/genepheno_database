<?xml version="1.0" ?>
<!DOCTYPE pmc-articleset PUBLIC "-//NLM//DTD ARTICLE SET 2.0//EN" "https://dtd.nlm.nih.gov/ncbi/pmc/articleset/nlm-articleset-2.0.dtd">

<pmc-articleset><article article-type="research-article" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<?properties open_access?>
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
<journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
<journal-title-group>
<journal-title>Nature Communications</journal-title>
</journal-title-group>
<issn pub-type="epub">2041-1723</issn>
<publisher>
<publisher-name>Nature Publishing Group UK</publisher-name>
<publisher-loc>London</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="pmid">29643364</article-id>
<article-id pub-id-type="pmc">5895786</article-id>
<article-id pub-id-type="publisher-id">3635</article-id>
<article-id pub-id-type="doi">10.1038/s41467-018-03635-9</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Article</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>PREDICTD PaRallel Epigenomics Data Imputation with Cloud-based Tensor Decomposition</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-2056-4199</contrib-id>
<name>
<surname>Durham</surname>
<given-names>Timothy J.</given-names>
</name>
<xref ref-type="aff" rid="Aff1">1</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Libbrecht</surname>
<given-names>Maxwell W.</given-names>
</name>
<xref ref-type="aff" rid="Aff1">1</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-4842-262X</contrib-id>
<name>
<surname>Howbert</surname>
<given-names>J. Jeffry</given-names>
</name>
<xref ref-type="aff" rid="Aff1">1</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Bilmes</surname>
<given-names>Jeff</given-names>
</name>
<xref ref-type="aff" rid="Aff2">2</xref>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-7283-4715</contrib-id>
<name>
<surname>Noble</surname>
<given-names>William Stafford</given-names>
</name>
<address>
<email>william-noble@uw.edu</email>
</address>
<xref ref-type="aff" rid="Aff1">1</xref>
<xref ref-type="aff" rid="Aff3">3</xref>
</contrib>
<aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000000122986657</institution-id><institution-id institution-id-type="GRID">grid.34477.33</institution-id><institution>Department of Genome Sciences, </institution><institution>University of Washington, </institution></institution-wrap>Foege Building S-250, Box 355065, 3720 15th Ave NE, Seattle, WA 98195 USA </aff>
<aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000000122986657</institution-id><institution-id institution-id-type="GRID">grid.34477.33</institution-id><institution>Department of Electrical Engineering, </institution><institution>University of Washington, </institution></institution-wrap>Paul Allen Center AE100R, Box 352500, 185 Stevens Way, Seattle, WA 98195 USA </aff>
<aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000000122986657</institution-id><institution-id institution-id-type="GRID">grid.34477.33</institution-id><institution>Department of Computer Science and Engineering, </institution><institution>University of Washington, </institution></institution-wrap>Foege Building S-250, Box 355065, 3720 15th Ave NE, Seattle, WA 98195 USA </aff>
</contrib-group>
<pub-date pub-type="epub">
<day>11</day>
<month>4</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="pmc-release">
<day>11</day>
<month>4</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="collection">
<year>2018</year>
</pub-date>
<volume>9</volume>
<elocation-id>1402</elocation-id>
<history>
<date date-type="received">
<day>10</day>
<month>4</month>
<year>2017</year>
</date>
<date date-type="accepted">
<day>2</day>
<month>3</month>
<year>2018</year>
</date>
</history>
<permissions>
<copyright-statement>© The Author(s) 2018</copyright-statement>
<license license-type="OpenAccess">
<license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
</license>
</permissions>
<abstract id="Abs1">
<p id="Par1">The Encyclopedia of DNA Elements (ENCODE) and the Roadmap Epigenomics Project seek to characterize the epigenome in diverse cell types using assays that identify, for example, genomic regions with modified histones or accessible chromatin. These efforts have produced thousands of datasets but cannot possibly measure each epigenomic factor in all cell types. To address this, we present a method, PaRallel Epigenomics Data Imputation with Cloud-based Tensor Decomposition (PREDICTD), to computationally impute missing experiments. PREDICTD leverages an elegant model called “tensor decomposition” to impute many experiments simultaneously. Compared with the current state-of-the-art method, ChromImpute, PREDICTD produces lower overall mean squared error, and combining the two methods yields further improvement. We show that PREDICTD data captures enhancer activity at noncoding human accelerated regions. PREDICTD provides reference imputed data and open-source software for investigating new cell types, and demonstrates the utility of tensor decomposition and cloud computing, both promising technologies for bioinformatics.</p>
</abstract>
<abstract abstract-type="web-summary" id="Abs2">
<p id="Par2">Assays to characterize the epigenome and interrogate chromatin state genome wide have so far been performed in a selected set of conditions. Here, Durham et al. develop a computational method based on tensor decomposition to impute missing experiments in collections of epigenomics experiments.</p>
</abstract>
<custom-meta-group>
<custom-meta>
<meta-name>issue-copyright-statement</meta-name>
<meta-value>© The Author(s) 2018</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<sec id="Sec1" sec-type="introduction">
<title>Introduction</title>
<p id="Par3">Understanding how the genome is interpreted by varied cell types, in different developmental and environmental contexts, is the key question in biology. With the advent of high-throughput next-generation sequencing technologies, over the past decade, we have witnessed an explosion in the number of assays to characterize the epigenome and interrogate the chromatin state, genome wide. Assays to measure chromatin accessibility (DNase-seq, ATAC-seq, FAIRE-seq), DNA methylation (RRBS, WGBS), histone modification, and transcription factor binding (ChIP-seq) have been leveraged in large projects, such as the Encyclopedia of DNA Elements (ENCODE)<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> and the Roadmap Epigenomics Project<sup><xref ref-type="bibr" rid="CR2">2</xref></sup> to characterize patterns of biochemical activity across the genome in many different cell types and developmental stages. These projects have produced thousands of genome-wide datasets, and studies leveraging these datasets have provided insight into multiple aspects of genome regulation, including mapping different classes of genomic elements<sup><xref ref-type="bibr" rid="CR3">3</xref>,<xref ref-type="bibr" rid="CR4">4</xref></sup>, inferring gene regulatory networks<sup><xref ref-type="bibr" rid="CR5">5</xref></sup>, and providing insights into possible disease-causing mutations identified in genome-wide association studies (GWAS)<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>.</p>
<p id="Par4">Despite the progress made by these efforts to map the epigenome, much work remains to be done. Due to time and funding constraints, data have been collected for only a fraction of the possible pairs of cell types and assays defined in these projects (Fig. <xref ref-type="fig" rid="Fig1">1a</xref>). Furthermore, taking into account all possible developmental stages and environmental conditions, the number of possible human cell types is nearly infinite, and it is clear that we will never be able to collect data for all cell type/assay pairs. However, understanding the epigenome is not an intractable problem, because in reality many of the assays detect overlapping signals, such that most of the unique information can be recovered from just a subset of experiments. One solution is thus to prioritize experiments for new cell types, based on analysis of existing data<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>. Alternatively, one may exploit existing data to accurately impute the results of missing experiments.<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview. <bold>a</bold> Matrix representing the subset of the Roadmap Epigenomics consolidated data set used in this study. Experiments in yellow have observed data, while missing experiments are purple. <bold>b</bold> We model the experiments in <bold>a</bold> as a three-dimensional tensor, and find three low-rank factor matrices (denoted <italic>C</italic>, <italic>A</italic>, and <italic>G</italic>) that can be combined by summing the outer products of each of the <italic>L</italic> latent factor vector triplets to reconstruct a complete tensor with no missing values that both approximates the existing data and imputes the missing data. <bold>c</bold> The genome dimension is very large, so in order to fit all of the data in memory and to speed up training, we distribute the tensor across multiple cluster nodes running Apache Spark. Then we use parallel stochastic gradient descent<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> to share the <italic>A</italic> and <italic>C</italic> matrices across all nodes</p></caption><graphic id="d29e333" xlink:href="41467_2018_3635_Fig1_HTML"></graphic></fig></p>
<p id="Par5">Ernst and Kellis pioneered this imputation approach, and achieved remarkable accuracy with their method, ChromImpute<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. Briefly, this method imputes data for a particular target assay in a particular target cell type by: (1) finding the top ten cell types most correlated with the target cell type, based on data from non-target assays, (2) extracting features from the data for the target assay from the top ten non-target cell types, and also extracting features from the data for non-target assays in the target cell type, and (3) training a regression tree for each of the top ten most correlated cell types. Data points along the genome are imputed as the mean predicted value from the collection of trained regression trees. Although ChromImpute produces highly accurate imputed data, this training scheme is complicated and not very intuitive, and results in a fragmented model of the epigenome that is very difficult to interpret. We hypothesized that an alternative approach, in which a single joint model learns to impute all experiments at once, would simplify the model training and improve the interpretability, while maintaining accurate imputation of missing data.</p>
<p id="Par6">Accordingly, we present PaRallel Epigenomics Data Imputation with Cloud-based Tensor Decomposition (PREDICTD), which treats the imputation problem as a tensor completion task, and employs a parallelized algorithm based on the PARAFAC/CANDECOMP method<sup><xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR9">9</xref>,]</sup>. Our implementation, developed on consumer cloud infrastructure, achieves high accuracy imputation of ENCODE and Roadmap Epigenomics data, and predicts all datasets jointly in a single model. We used PREDICTD to impute the results for 3048 experiments across 127 cell types and 24 assays from the Roadmap Epigenomics project, and these imputed data are available for download through ENCODE (<ext-link ext-link-type="uri" xlink:href="https://www.encodeproject.org/">https://www.encodeproject.org/</ext-link>). In the following sections, we explain the model, discuss its performance on held out experiments from the Roadmap Epigenomics Consolidated data<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, show that the model parameters summarize biologically relevant features in the data, and demonstrate that imputed data can recapitulate important cell type-specific gene regulatory signals in noncoding human accelerated regions (ncHARs) of the genome<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>.</p>
</sec>
<sec id="Sec2" sec-type="results">
<title>Results</title>
<sec id="Sec3">
<title>Epigenomic maps can be imputed using tensor factorization</title>
<p id="Par7">Data from Roadmap and ENCODE projects can be organized into a 3D tensor, with axes corresponding to cell types, assays, and genomic positions (Fig. <xref ref-type="fig" rid="Fig1">1b</xref>). This tensor is long and skinny, with many fewer cell types and assays than genomic positions, and the data for experiments that have not been done yet are missing in the tensor fibers along the genome dimension. Our strategy for imputing these fibers is to jointly learn three factor matrices that can be combined mathematically to produce a complete tensor that both approximates the observed data and predicts the missing data. These three factor matrices are of shape <italic>C</italic> × <italic>L</italic>, <italic>A</italic> × <italic>L</italic>, and <italic>G</italic> × <italic>L</italic>, where <italic>C</italic>, <italic>A</italic>, and <italic>G</italic> indicate the numbers of cell types, assays, and genomic positions, respectively, and <italic>L</italic> indicates the number of “latent factors” that the model trains (Fig. <xref ref-type="fig" rid="Fig1">1b</xref>), and thus the number of model parameters.</p>
<p id="Par8">We developed and trained our implementation of this tensor-factorization model, PREDICTD, using 1014 datasets from the Roadmap Epigenomics Consolidated Epigenomes<sup><xref ref-type="bibr" rid="CR2">2</xref></sup> (Fig. <xref ref-type="fig" rid="Fig1">1a</xref>). To assess model performance, we split the datasets into five training/test splits, and we report the results of imputing each test set at 25 base pair resolution. The model training proceeds by distributing the data and genome parameters across the nodes of the cluster, and then sharing the cell type and assay parameters across all nodes, using a parallelized training procedure (See Methods, Fig. <xref ref-type="fig" rid="Fig1">1c</xref>). We find that training on a randomly selected 0.01% of the genome provides enough signal for learning the cell type and assay parameters; these parameters are then applied across all genomic positions of interest by training the genome parameters for each position while holding the cell type and assay parameters constant. We report the results from imputing just over 1% of the genome, including the ENCODE Pilot Regions<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> and 2640 ncHARs<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>. All subsequent references to the genome dimension in this manuscript refer to this subset of loci.</p>
<p id="Par9">Our model formulation and implementation offer several important advantages. First, training a single model to impute all datasets at once is a straightforward and intuitive way of solving this problem. Second, as we demonstrate below, the model can leverage  the joint training to perform well even in cell types with a single informative experiment. Third, the parameters of the trained model have the same semantics across all input datasets and, although a full investigation of model interpretability is outside the scope of this work, we show that the trained parameters show different patterns for different cell types, assays, and genomic elements. We take these results as evidence that the PREDICTD model itself holds the potential to be interrogated to learn about relationships among assays, cell types, and genomic loci. Last, PREDICTD software is open-source (<ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/noblelab/predictd">https://bitbucket.org/noblelab/predictd</ext-link>), and is also implemented and distributed on the consumer cloud, which makes our model immediately accessible to, and easily runnable by, nearly anyone.</p>
</sec>
<sec id="Sec4">
<title>PREDICTD imputes epigenomics experiments with high accuracy</title>
<p id="Par10">PREDICTD imputes missing data with high accuracy, based on both visual inspection and quality measures (Fig. <xref ref-type="fig" rid="Fig2">2</xref>). Visually, the imputed signal pattern closely matches that of observed data, and recapitulates the known associations of epigenomic marks with genomic features (Fig. <xref ref-type="fig" rid="Fig2">2a</xref>, Supplementary Fig. <xref ref-type="media" rid="MOESM1">1</xref>). For example, as expected, H3K4me3-imputed signal is strongly enriched in narrow peaks at promoter regions near the transcription start site of active genes, and H3K36me3, known to mark transcribing regions, is enriched over gene bodies.<fig id="Fig2"><label>Fig. 2</label><caption><p>PREDICTD imputes missing epigenomics data with high accuracy. <bold>a</bold> Comparison of PREDICTD and observed data in H1 embryonic stem cells, which is one of the three cell types with observed data for all assays. For each assay, the top track is PREDICTD and the bottom is observed. See Supplementary Fig. <xref ref-type="media" rid="MOESM1">1</xref> for more assays. <bold>b</bold> Global mean squared error (MSEglobal) for each dataset, shown as box plots for the baseline Main Effects model (pink), and PREDICTD (blue). For each distribution, the box shows the inter-quartile range (IQR), whiskers show 1.5 times the IQR, and flier points show individual datasets that are outliers. The median is indicated by a horizontal gold line on each box plot. See Supplementary Fig. <xref ref-type="media" rid="MOESM1">2</xref> for more quality measures. <bold>c</bold> Simulated analysis of a cell type with few available datasets. The bar graph shows the MSEglobal measure for the six available assays for the “CD3 primary cells from cord blood” cell type on four models. In blue is the full PREDICTD model shown in <bold>a</bold> and <bold>b</bold>, while the other bars represent models trained with all observed data for other cell types, but only H3K4me1 (orange), only H3K4me3 (green), or only H3K4me3 and H3K9me3 (yellow) for “CD3 primary cells from cord blood.” See Supplementary Fig. <xref ref-type="media" rid="MOESM1">3</xref> for more quality measures</p></caption><graphic id="d29e483" xlink:href="41467_2018_3635_Fig2_HTML"></graphic></fig></p>
<p id="Par11">We also show strong performance of PREDICTD on ten different quality measures (see Methods, Supplementary Figs <xref ref-type="media" rid="MOESM1">2</xref>, <xref ref-type="media" rid="MOESM1">14</xref>, <xref ref-type="media" rid="MOESM1">15</xref>, Supplementary Data <xref ref-type="media" rid="MOESM15">13</xref>–<xref ref-type="media" rid="MOESM18">16</xref>), especially the global mean squared error quality measure (MSEglobal). As a key part of the PREDICTD model’s objective function, MSEglobal is explicitly optimized during model training (see Methods). The MSEglobal measure has a mean of 0.1229, and it ranges from 0.0359 for H3K4me3 in the “NHLF Lung Fibroblasts” cell type to 0.4511 for H4K20me1 in “Monocytes CD14+ RO01746.” Other key quality measures include the genome-wide Pearson correlation (GWcorr, mean: 0.6886, min: 0.0790 for H3K36me3 in “Right Atrium,” max: 0.9391 for H3K4me3 in “HUES64 Cell Line”), and the area under the receiver operating characteristic curve for recovering observed peak regions from imputed data (CatchPeakObs, mean: 0.9565, min: 0.5503 for H3K36me3 in “Right Atrium,” max: 0.9984 for H3K4me3 in “NHLF Lung Fibroblasts”). Note that seven of our ten quality measures, including GWcorr and CatchPeakObs, were also used in the ChromImpute publication<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>.</p>
<p id="Par12">As a baseline, we compared the performance of PREDICTD to a simple “Main Effects” model, which computes the global mean of the observed data, and then the column and row residuals of each two-dimensional (2D) slice of the tensor along the genome dimension, and imputes a given cell in the tensor by summing the global mean and the corresponding row and column residual means. PREDICTD outperforms this baseline model for MSEglobal on all but two assays (Fig. <xref ref-type="fig" rid="Fig2">2b</xref>). Furthermore, PREDICTD similarly outperforms the Main Effects on all additional performance measures (Supplementary Fig. <xref ref-type="media" rid="MOESM1">2</xref>).</p>
</sec>
<sec id="Sec5">
<title>PREDICTD performs well on cell types with few assays</title>
<p id="Par13">The key application of PREDICTD will be to impute results for cell types that may have only one or two datasets available. To investigate the performance of PREDICTD in this context, we trained a model on all available data for all cell types, except that we only included one or two experiments for the “CD3 cord blood primary cells” cell type. In particular, one model had just H3K4me1 in the training set for this cell type, one had just H3K4me3, and one had both H3K4me3 and H3K9me3. Comparing the performance measures between these experiments and the imputed results from our original models trained on the five test sets, we find that the results of training with just H3K4me3 or both H3K4me3 and H3K9me3 are nearly as good as (and sometimes better than) the results from the original models with training data that included five or six experiments for this cell type (Fig. <xref ref-type="fig" rid="Fig2">2c</xref>, Supplementary Fig. <xref ref-type="media" rid="MOESM1">3</xref>). Imputing based on H3K4me1 signal did not perform as well as imputing based on only H3K4me3. This observation is consistent with previous results of assay prioritization<sup><xref ref-type="bibr" rid="CR6">6</xref></sup> indicating that H3K4me3 is the most information-rich assay. Furthermore, this result is not specific to the “CD3 cord blood primary cells” cell type. We find that the results for imputing four other cell types (“GM12878 lymphoblastoid,” “fetal muscle trunk,” “brain anterior caudate,” and “lung”), just based on H3K4me3 signal, showed similar results (Supplementary Figs. <xref ref-type="media" rid="MOESM1">5</xref>, <xref ref-type="media" rid="MOESM1">6</xref>, <xref ref-type="media" rid="MOESM1">7</xref>, <xref ref-type="media" rid="MOESM1">8</xref>). We conclude that PREDICTD performs well on under-characterized cell types, and will be useful for studying new cell types for which few datasets are currently available.</p>
</sec>
<sec id="Sec6">
<title>Model parameters capture patterns in each tensor dimension</title>
<p id="Par14">The fact that PREDICTD performs well on the imputation task implies that the parameters learned by the model capture patterns that can distinguish among different cell types, assays, and genomic positions, and we next present results showing that this is the case. We think it important to note that it would be incorrect, at this point, to interpret any particular latent factor as having a specific biological meaning. We place no a priori constraints on what patterns in the data PREDICTD uses to arrive at a solution, and any signal with relevance to a particular biological feature is likely distributed across multiple latent factors. As such, here we simply show that the parameters, in aggregate, exhibit different patterns between different cell types, assays, and genomic loci; a full investigation on the ways to gain biological insight, from these parameters, is outside the scope of our present study.</p>
<p id="Par15">Although we cannot definitively assign semantics to individual latent factors, we find that their values in aggregate show patterns that recover known relationships among the cell types, assays and genomic loci (Fig. <xref ref-type="fig" rid="Fig3">3</xref>). Hierarchical clustering on the rows of the cell type factor matrix shows that similar cell types are grouped together (Fig. <xref ref-type="fig" rid="Fig3">3a</xref>), producing large clades for embryonic stem cells (magenta), immune cell types (green), and brain tissues (cyan), among others (Fig. <xref ref-type="fig" rid="Fig3">3a</xref>, Supplementary Fig. <xref ref-type="media" rid="MOESM1">9</xref>). In the same way, assays with similar targets cluster together (Fig. <xref ref-type="fig" rid="Fig3">3b</xref>), with the colored clades from top to bottom representing acetylation marks generally associated with active promoters (magenta), marks that are strongly associated with active regulatory regions (cyan/blue), and broad marks for transcription (red) and repression (green). The assays cluster perfectly except that, biologically, H3K23ac should be grouped with either the active regulatory marks (cyan/blue) or the active acetylation marks (magenta). This is one of the two assays for which PREDICTD failed to outperform the Main Effects, and it was one of the worst performing assays for ChromImpute as well, so it appears to be a difficult mark to impute. Nevertheless, most of the cell types and assays cluster correctly, and these results are highly nonrandom. We quantified this by comparing our clustering results to randomly shuffled cluster identities, using the Calinski–Harabaz Index, which assesses how well the clustering separates the data by comparing the average distance among points between clusters to the average distance among points within clusters (Supplementary Fig. <xref ref-type="media" rid="MOESM1">10</xref>).<fig id="Fig3"><label>Fig. 3</label><caption><p>The model parameters can distinguish among elements in each tensor dimension. Plots show the values (or average values) for 100 latent factors from one of the models trained for this manuscript, and that these values show patterns that distinguish among cell types, assays, and genomic elements. <bold>a</bold> Hierarchical clustering of the cell types, based on cell type factor matrix values, shows that similar cell types tend to cluster together. This is a subset of cell types; for a clustering of all cell types see Supplementary Fig. <xref ref-type="media" rid="MOESM1">9</xref>. <bold>b</bold> Hierarchical clustering of the assays, based on assay factor matrix values, shows that similar assays tend to cluster together. <bold>c</bold> Average values from the genome-factor matrix show different patterns at different parts of the gene, and P300 peaks called from ENCODE data. <bold>d</bold> Average values from the genome factor matrix, for each latent factor, plotted as a line spanning the region ±1 kb around the center of P300 peaks. Parameter values are centered at zero and plotted based on whether they show the highest magnitude at the peak (left, 64 latent factors) or flanking the peak (right, 36 latent factors)</p></caption><graphic id="d29e591" xlink:href="41467_2018_3635_Fig3_HTML"></graphic></fig></p>
<p id="Par16">For the genome factor matrix, we projected the coordinates of each gene, from the GENCODE v19 human genome annotation<sup><xref ref-type="bibr" rid="CR11">11</xref></sup> (<ext-link ext-link-type="uri" xlink:href="https://www.gencodegenes.org/releases/19.html">https://www.gencodegenes.org/releases/19.html</ext-link>), onto an idealized gene model that includes nine parts from 5′ to 3′ in the gene: the promoter, 5′ untranslated region (UTR), first exon, first intron, middle exons, middle introns, last intron, last exon, and 3′ UTR. This procedure produced a summary of the genome latent factors (Fig. <xref ref-type="fig" rid="Fig3">3c</xref>) that, when reading each column of the heat map as a feature vector for a particular location in a gene, shows distinct patterns at different gene components. For example, latent factors that on average have high or low values at regions (i.e., heat map columns) near the transcription start site are different from those with high or low values at other gene components, like exons and introns.</p>
<p id="Par17">In addition to investigating patterns in the genome parameters at genes, we checked to see whether distal regulatory regions showed a pattern distinct from gene components. P300 is a chromatin regulator that associates with active enhancers<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>. We therefore decided to search for patterns in the genome latent factors at windows ±1 kb around annotated P300 sites from published ENCODE tracks (see Methods). Note that no P300 data was used to train PREDICTD. Nevertheless, we find a striking pattern, with many latent factors showing average values of larger magnitude within the 400 bp region surrounding the center of the peak, and some others showing larger average magnitude in a flanking pattern in the bins 200–400 bp away from the peak center (Fig. <xref ref-type="fig" rid="Fig3">3c, d</xref>). Again, note that these results do not imply a biological meaning for any particular latent factor; instead, we hypothesize that the genome latent factors as a whole might be useful as features for classification or deeper characterization of genomic elements. Last, if we randomize the latent factors at each genomic location and do the same analyses, we find no discernible pattern (Supplementary Fig. <xref ref-type="media" rid="MOESM1">11</xref>). We thus conclude that the trained model parameters encode patterns that correspond to biology.</p>
</sec>
<sec id="Sec7">
<title>PREDICTD and ChromImpute data are similar and complementary</title>
<p id="Par18">As described in the Introduction, the ChromImpute method<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> provides high-quality imputed data, but employs a complicated model and training procedure tuned to each individual experiment. In contrast, our tensor decomposition approach imputes all missing experiments by using a single model, which we argue is conceptually simpler and addresses the problem in a more natural way. Furthermore, we find that our model outperforms ChromImpute on our primary performance measure (MSEglobal), and yields similar performance on nine additional measures (Fig. <xref ref-type="fig" rid="Fig4">4a</xref>, Table <xref ref-type="table" rid="Tab1">1</xref>, Supplementary Figs. <xref ref-type="media" rid="MOESM1">14</xref>, <xref ref-type="media" rid="MOESM1">15</xref>, and Supplementary Data <xref ref-type="media" rid="MOESM3">1</xref>, <xref ref-type="media" rid="MOESM15">13</xref>–<xref ref-type="media" rid="MOESM18">16</xref>). Also see Supplementary Figs. <xref ref-type="media" rid="MOESM1">4</xref>, <xref ref-type="media" rid="MOESM1">2</xref>, <xref ref-type="media" rid="MOESM1">3</xref>, <xref ref-type="media" rid="MOESM1">5</xref>, <xref ref-type="media" rid="MOESM1">6</xref>, <xref ref-type="media" rid="MOESM1">7</xref>, <xref ref-type="media" rid="MOESM1">8</xref> for figures similar to those in Fig. <xref ref-type="fig" rid="Fig2">2</xref>, but with ChromImpute values included. The correlation of quality measures between PREDICTD and ChromImpute is higher than the correlation between the Main Effects method and ChromImpute, indicating that PREDICTD agrees with ChromImpute more often than Main Effects does. Furthermore, the mean log ratio of quality measures on corresponding experiments imputed by PREDICTD and ChromImpute show smaller differences than the log ratios for Main Effects and ChromImpute (Table <xref ref-type="table" rid="Tab1">1</xref>, Supplementary Data <xref ref-type="media" rid="MOESM3">1</xref>, Fig. <xref ref-type="fig" rid="Fig4">4</xref>, Supplementary Figs. <xref ref-type="media" rid="MOESM1">14</xref>, <xref ref-type="media" rid="MOESM1">15</xref>). Thus, PREDICTD produces high-quality imputed data that is almost as good, or better than, ChromImpute predictions, depending upon which quality measure is employed.<fig id="Fig4"><label>Fig. 4</label><caption><p>PREDICTD performs comparably to ChromImpute, and combining the models improves the result. <bold>a</bold> Schematic describing how a ternary plot relates to Cartesian coordinates. Each experiment (represented by a black dot) is plotted in Cartesian space based on the values of a particular quality score for imputed data (in this example, MSEglobal) from PREDICTD, ChromImpute, and Main Effects. Each point in this space is then projected onto a plane by a vector drawn through the point and the origin. The resulting ternary plot summarizes the relative magnitude of the quality score for the three models. If all models achieve the same quality measure score for a particular experiment, then that point will be projected onto the center of the ternary plot. Deviation toward a corner of the triangle indicates that one model has a higher value for that quality measure than the other two, and deviation from the center toward one of the edges of the triangle indicates that one model has a lower value. Color shading of the plot area marks the regions of the ternary plot that indicate superior performance of each model on a particular quality measure. The pattern of the colors changes based on whether it is better to have a low value on that quality measure (as with mean squared error) or a high value (for example, the genome-wide correlation). <bold>b</bold> Comparing PREDICTD, ChromImpute, and Main Effects models across five quality measures: the global mean squared error (MSEglobal), the genome-wide Pearson correlation (GWcorr), the percent of the top 1% of observed data windows by signal value found in the top 5% of imputed windows (Catch1obs), the percent of the top 1% of imputed windows by signal value found in the top 5% of observed windows (Catch1imp), and the area under the receiver operating characteristic curve for recovery of observed peak calls from all imputed windows ranked by signal value (CatchPeakObs). <bold>c</bold> The same as in <bold>b</bold>, except that the quality measures for the averaged results of ChromImpute and PREDICTD are plotted along the bottom (red) axis, instead of the measures of PREDICTD alone</p></caption><graphic id="d29e710" xlink:href="41467_2018_3635_Fig4_HTML"></graphic></fig><table-wrap id="Tab1"><label>Table 1</label><caption><p>Statistics comparing models across five quality measures show PREDICTD outperforms Main Effects and has similar performance to ChromImpute</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="3">Measure</th><th colspan="3">PREDICTD vs ChromImpute</th><th colspan="3">PREDICTD vs Main Effects</th><th colspan="3">Main Effects vs ChromImpute</th></tr><tr><th rowspan="2">Corr</th><th colspan="2">Log ratio</th><th rowspan="2">Corr</th><th colspan="2">Log ratio</th><th rowspan="2">Corr</th><th colspan="2">Log ratio</th></tr><tr><th>Mean</th><th>Std</th><th>Mean</th><th>Std</th><th>Mean</th><th>Std</th></tr></thead><tbody><tr><td>MSEglobal</td><td>0.689</td><td>−0.151</td><td>0.266</td><td>0.835</td><td>−0.188</td><td>0.212</td><td>0.510</td><td>0.037</td><td>0.373</td></tr><tr><td>GWcorr</td><td>0.977</td><td>−0.039</td><td>0.072</td><td>0.883</td><td>0.100</td><td>0.163</td><td>0.866</td><td>−0.139</td><td>0.164</td></tr><tr><td>Catch1obs</td><td>0.979</td><td>−0.028</td><td>0.055</td><td>0.916</td><td>0.097</td><td>0.161</td><td>0.886</td><td>−0.125</td><td>0.177</td></tr><tr><td>Catch1imp</td><td>0.973</td><td>−0.023</td><td>0.073</td><td>0.876</td><td>0.155</td><td>0.293</td><td>0.848</td><td>−0.178</td><td>0.306</td></tr><tr><td>CatchPeakObs</td><td>0.923</td><td>−0.008</td><td>0.017</td><td>0.776</td><td>0.025</td><td>0.037</td><td>0.812</td><td>−0.032</td><td>0.035</td></tr></tbody></table><table-wrap-foot><p>See Supplementary Data <xref ref-type="media" rid="MOESM3">1</xref> for the statistics on all quality measures.</p></table-wrap-foot></table-wrap></p>
<p id="Par19">We also calculated the distribution of the differences between imputed values and observed values for experiments imputed by both PREDICTD and ChromImpute, and we found that ChromImpute tends to impute higher values than PREDICTD (Supplementary Fig. <xref ref-type="media" rid="MOESM1">13</xref>). We hypothesized that the two models each perform better on different parts of the genome, and so we tried averaging the PREDICTD and ChromImpute results. By the MSEglobal measure, we do see a marked improvement relative to both models, and other quality measures on which ChromImpute outperformed PREDICTD alone show parity between ChromImpute and the averaged model (Fig. <xref ref-type="fig" rid="Fig4">4</xref>b).</p>
</sec>
<sec id="Sec8">
<title>Imputed data recovers cell type-specific enhancer signatures</title>
<p id="Par20">Human accelerated regions (HARs) are genomic loci that are highly conserved across mammals, but harbor more mutations in human than would be expected for their level of conservation (reviewed in ref. <sup><xref ref-type="bibr" rid="CR13">13</xref></sup>). Although some HARs overlap coding regions, the overwhelming majority (&gt;90%) are found in noncoding portions of the genome (ncHARs)<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR13">13</xref></sup>, and ncHARs are thought to be enriched for mutations that affect the regulation of genes underlying human-specific traits. Noncoding variation is thought to account for much of our phenotypic divergence from other primates<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>, and additional evidence in support of this hypothesis comes from observations that ncHARs cluster around developmental and transcription factor genes<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR13">13</xref></sup>, transgenic assays for functional validation of enhancer activity<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR15">15</xref>–<xref ref-type="bibr" rid="CR17">17</xref></sup>, computational epigenomics, and population genetics studies<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR18">18</xref>,<xref ref-type="bibr" rid="CR19">19</xref></sup>.</p>
<p id="Par21">In particular, ncHARs are enriched in developmental enhancer activity<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR18">18</xref></sup>. In<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> EnhancerFinder<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>, a program to predict genomic regions with tissue-specific developmental enhancer activity, was trained on ENCODE epigenomics maps<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> and results from the VISTA enhancer database<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>, and applied to ncHARs. EnhancerFinder predicted enhancer activity for 773 of 2649 ncHARs, but the authors note that the characterization of these regions remains incomplete due to limitations in the available data. To our knowledge, no one has yet analyzed enhancer signatures of ncHARs in the context of the Epigenomics Roadmap data. Thus, we decided to address this question as a way to validate PREDICTD in a biological application, and to extend the EnhancerFinder results by assessing cell type-specific enhancer activity in the ncHARs based on the Roadmap dataset.</p>
<p id="Par22">Briefly, we imputed data for three enhancer-associated assays (DNase, H3K27ac, and H3K4me1) in all cell types, and averaged the imputed signal over each ncHAR to produce a small tensor with axes corresponding to three assays, 2640 ncHARs, and 127 cell types. We flattened the assay dimension of this tensor by taking the first principal component, and then used a biclustering algorithm to group the ncHARs and cell types (see Methods). The resulting cell type groups are consistent with tissue of origin (Fig. <xref ref-type="fig" rid="Fig5">5a</xref>, Supplementary Data <xref ref-type="media" rid="MOESM4">2</xref>), and the ncHARs cluster based on enhancer-associated signal in different cell type clusters as follows: no signal (77% of the ncHARs), brain/ES (13%), epithelial/mesenchymal (7%), non-immune (2%), and immune (1%) (Fig. <xref ref-type="fig" rid="Fig5">5a</xref>, Supplementary Data <xref ref-type="media" rid="MOESM5">3</xref>). Using the same strategy to cluster the available observed data gives very similar results, as quantified by the adjusted Rand index (Fig. <xref ref-type="fig" rid="Fig5">5b</xref>), especially when compared to two background models: shuffled, in which the ncHAR coordinates have been randomly shuffled along the genome; and other, in which the enhancer-associated marks were exchanged for three non-enhancer-associated marks (H3K4me3, H3K27me3, and H3K36me3). A heat map showing the clustering of observed data is provided in Supplementary Fig. <xref ref-type="media" rid="MOESM1">17</xref>.<fig id="Fig5"><label>Fig. 5</label><caption><p>Imputation of enhancer marks reveals tissue-specific patterns of enhancer-associated marks at noncoding human accelerated regions (ncHARs). <bold>a</bold> Average PREDICTD signal at each ncHAR was compiled for H3K4me1, H3K27ac, and DNase assays from all cell types. The first principal component with respect to the three assays was used in a biclustering to find six and five clusters along the cell type, and ncHAR dimensions, respectively. The inverse hyperbolic sine-transformed signal from each of these assays was summed per cell type and ncHAR, and the resulting values were plotted as a heat map. The column marked with a black triangle at the top designates the color key for the ncHAR clusters. The leftmost column, designated with a black circle, identifies ncHARs with predicted tissue-specific developmental enhancer activity, based on EnhancerFinder analysis from Capra et al.<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>. <bold>b</bold> and <bold>c</bold> Evaluation of the clustering results with the adjusted Rand index. The clustering results for observed data and PREDICTD for the ncHAR (<bold>b</bold>) and cell type clusterings (<bold>c</bold>), and also those from Capra et al.<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> for the ncHARs, all show higher adjusted Rand index scores than the clustering results for observed data with shuffled ncHAR coordinates (shuffled) or for observed data from non-enhancer-associated marks (other)</p></caption><graphic id="d29e1078" xlink:href="41467_2018_3635_Fig5_HTML"></graphic></fig></p>
<p id="Par23">These biclustering results also agree with and expand upon previously published tissue specificity predictions from EnhancerFinder<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR18">18</xref></sup>. The brain enhancer predictions from that study are visibly enriched in our brain/ES cluster, and the limb and heart predictions are enriched in our clusters showing activity in differentiated, epithelial, and mesenchymal cell types (Fig. <xref ref-type="fig" rid="Fig5">5a</xref>). If we treat the EnhancerFinder tissue assignments<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> as another clustering of the ncHARs, we find that they are more similar to our clustering (both for observed and imputed data) than to either background clustering (Fig. <xref ref-type="fig" rid="Fig5">5b</xref>). In addition, our results expand on EnhancerFinder by assigning to cell type-associated clusters 289 ncHARs (11% of ncHARs) that were characterized by EnhancerFinder as either having activity in “other” tissues (98 ncHARs) or no developmental enhancer activity (“N/A,” 191 ncHARs). We also find that our clustering successfully predicts enhancer activity for many functionally validated ncHARs, and furthermore assigns most of them to the correct cell types (Supplementary Data <xref ref-type="media" rid="MOESM6">4</xref>). Briefly, we correctly identify enhancer activity in ten of 23 ncHARs with evidence in the VISTA database<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR20">20</xref></sup>, and 6 of 7 ncHARs with validation results suggesting enhancer activity specific to the human allele and not the chimp allele<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>; we find evidence of enhancer identity for one of three ncHARs associated with <italic>AUTS2</italic>, a gene associated with autism spectrum disorder, and this was one of two from that study that showed transgenic enhancer activity<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>; <italic>NPAS3</italic> is a gene associated with schizophrenia that lies in a large cluster of 14 ncHARs, and we find enhancer signal for seven of them, six of which have validated enhancer activity<sup><xref ref-type="bibr" rid="CR16">16</xref></sup>; last, HAR2 is a ncHAR with validated human-specific limb enhancer activity that clusters with our brain/ES category<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>. Thus, assessing the potential enhancer activity based on the Roadmap Epigenomics data, which encompasses different cell types and developmental stages than ENCODE, agrees with previous results and expands on them to characterize more ncHARs as having potential tissue-specific enhancer activity.</p>
<p id="Par24">Finally, we asked what types of biological processes these putative enhancers might regulate. We extracted the genomic coordinates of the ncHARs in each cluster, and used the Genomic Regions Enrichment of Annotations Tool (GREAT)<sup><xref ref-type="bibr" rid="CR21">21</xref></sup> to test for enriched ontology terms. Using the total list of ncHARs as the background, we found that the brain/ES cluster of ncHARs is enriched for GO biological process terms associated with cell migration in different brain regions; the epithelial/mesenchymal cluster shows enrichment for terms associated with tissue development, particularly mesenchymal cell differentiation; and, although there are no significantly enriched GO biological process terms for the non-immune cluster, there are enriched terms from a mouse phenotype ontology indicating these ncHARs could be associated with embryonic development and morphology (Table <xref ref-type="table" rid="Tab2">2</xref>, Supplementary Data <xref ref-type="media" rid="MOESM7">5</xref>–<xref ref-type="media" rid="MOESM14">12</xref>). We found no significantly enriched terms for the immune cluster.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Ontology search results are consistent with ncHAR cluster cell type identities</p></caption><table frame="hsides" rules="groups"><thead><tr><th>ncHAR cluster</th><th>Ontology</th><th>Enriched term</th><th>FDR</th></tr></thead><tbody><tr><td rowspan="16">Non-immune</td><td rowspan="16">Mouse phenotype</td><td>Abnormal craniofacial development</td><td>2.506e-03</td></tr><tr><td>Abnormal embryogenesis/development</td><td>8.269e-03</td></tr><tr><td>Hemorrhage</td><td>2.022e-02</td></tr><tr><td>Abnormal embryonic tissue morphology</td><td>2.204e-02</td></tr><tr><td>Abnormal basioccipital bone morphology</td><td>2.907e-02</td></tr><tr><td>Partial neonatal lethality</td><td>2.944e-02</td></tr><tr><td>Abnormal skeleton development</td><td>3.439e-02</td></tr><tr><td>Abnormal placental labyrinth vasculature morphology</td><td>3.465e-02</td></tr><tr><td>Perinatal lethality</td><td>3.601e-02</td></tr><tr><td>Abnormal embryo size</td><td>3.605e-02</td></tr><tr><td>Abnormal craniofacial morphology</td><td>3.703e-02</td></tr><tr><td>Decreased embryo size</td><td>3.805e-02</td></tr><tr><td>Abnormal blood circulation</td><td>3.873e-02</td></tr><tr><td>Decreased skeletal muscle fiber number</td><td>3.931e-02</td></tr><tr><td>Abnormal embryonic growth/weight/body size</td><td>4.263e-02</td></tr><tr><td>Neonatal lethality</td><td>4.344e-02</td></tr><tr><td rowspan="10">Epithelial/mesenchymal</td><td rowspan="10">GO biological process</td><td>Embryonic organ development</td><td>2.487e-02</td></tr><tr><td>Embryo development ending in birth or egg hatching</td><td>2.502e-02</td></tr><tr><td>Somite development</td><td>2.514e-02</td></tr><tr><td>Tissue morphogenesis</td><td>2.746e-02</td></tr><tr><td>Mesenchyme development</td><td>2.948e-02</td></tr><tr><td>Stem cell differentiation</td><td>3.109e-02</td></tr><tr><td>Anterior/posterior pattern specification</td><td>3.237e-02</td></tr><tr><td>Mesenchymal cell development</td><td>3.310e-02</td></tr><tr><td>Chordate embryonic development</td><td>3.431e-02</td></tr><tr><td>Somitogenesis</td><td>3.569e-02</td></tr><tr><td rowspan="4">Brain/ES</td><td rowspan="4">GO biological process</td><td>Telencephalon cell migration</td><td>2.150e-02</td></tr><tr><td>Cerebral cortex cell migration</td><td>2.897e-02</td></tr><tr><td>Forebrain cell migration</td><td>3.563e-02</td></tr><tr><td>Cerebral cortex radially oriented cell migration</td><td>4.523e-02</td></tr></tbody></table><table-wrap-foot><p>We used GREAT to find enriched ontology terms associated with genes that are possibly regulated by ncHARs from each cluster. The list of all ncHARs was used as the background, and the terms are significant at FDR &lt; 0.05 for the hypergeometric test, and have at least a two-fold enrichment over expected</p></table-wrap-foot></table-wrap></p>
<p id="Par25">The question of whether ncHARs are active enhancers in modern humans, or whether they are regions that formerly had enhancer activity that has been lost over the course of our evolution is a central question to the study of ncHAR biology. With this analysis, we shed more light on which ncHARs have enhancer activity, and even provide some insight into the relevant developmental stage for such activity, as our cell types are derived from embryonic, fetal, and adult tissues. Taken together, these results show that PREDICTD imputed data can capture cell type-specific regulatory signals, and that PREDICTD can be used as a tool to study the biology of new and under-characterized cell types in the future.</p>
</sec>
</sec>
<sec id="Sec9" sec-type="discussion">
<title>Discussion</title>
<p id="Par26">PREDICTD imputes thousands of epigenomics maps in parallel using a 3D tensor factorization model. Our work makes several important contributions. First, the model leverages a machine learning method, tensor decomposition, that holds particular promise in genomics for analyzing increasingly high-dimensional datasets. Tensor factorization with the PARAFAC/CANDECOMP procedure was first proposed by two groups independently, in 1970, in the context of analyzing psychometric electroencephalogram data<sup><xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR9">9</xref></sup>. Tensor decomposition by this and related methods has since been applied in many other fields<sup><xref ref-type="bibr" rid="CR22">22</xref>,<xref ref-type="bibr" rid="CR23">23</xref></sup>, and increasingly in biomedical fields as well<sup><xref ref-type="bibr" rid="CR24">24</xref>–<xref ref-type="bibr" rid="CR26">26</xref></sup>. Tensor decomposition has advantages over 2D methods, because taking into account more than 2D reduces the rotational flexibility of the model and helps drive the factors to a solution that can explain patterns in all dimensions at once. Our particular application, completing a tensor with missing data, is an area of active research<sup><xref ref-type="bibr" rid="CR27">27</xref></sup>, and is analogous to methods for matrix factorization that have proven effective in other machine learning applications like recommender systems<sup><xref ref-type="bibr" rid="CR28">28</xref></sup>. To our knowledge, PREDICTD is just the third application of the tensor decomposition approach to epigenomics data<sup><xref ref-type="bibr" rid="CR25">25</xref>,<xref ref-type="bibr" rid="CR26">26</xref></sup>, and the first to use a tensor completion approach to impute missing data in this setting. As such, our method demonstrates another way forward for integrating and jointly analyzing increasingly large and complex datasets in the field.</p>
<p id="Par27">Second, PREDICTD provides some key advantages over the current state-of-art for epigenomics data imputation. The best alternative method for predicting raw epigenomics signal is ChromImpute<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. Our tensor factorization approach is simpler and arguably more elegant than ChromImpute, because it naturally models the three key dimensions of the imputation problem, while training on and imputing all data at once. In addition, PREDICTD is less computationally intensive than ChromImpute, and scales better to imputing large numbers of experiments (see Methods—Computing resource requirements). Furthermore, as a single model that describes all experiments, the parameters PREDICTD learns during training have the same semantics across different cell types, assays, and genomic positions. We show that these parameters contain information that can be used to distinguish different types of cells, assays, or genomic elements, and future work will investigate how the PREDICTD model itself might be used to gain biological insight. Last, we show that PREDICTD outperforms ChromImpute on the MSEglobal quality measure, despite generally slightly under-performing ChromImpute on other measures (Fig. <xref ref-type="fig" rid="Fig4">4</xref>, Supplementary Fig. <xref ref-type="media" rid="MOESM1">14</xref>). There could be multiple reasons for this observation. First, as a tree-based model, ChromImpute can learn nonlinear relationships in the data that PREDICTD cannot, and it is possible that this accounts for some of the difference in performance between the two approaches. Second, the mean squared error (MSE) is central to the PREDICTD objective function, and so it is the quality measure on which the model should perform best; if another quality measure were used in the objective function, then PREDICTD might outperform ChromImpute on that one instead. Nevertheless, the fact that averaging the PREDICTD and ChromImpute results outperforms both methods alone suggests that the two approaches are complementary, and we are interested in exploring additional methods, particularly nonlinear models like deep neural networks, that might be able to combine the best of both approaches to further improve the imputed data quality.</p>
<p id="Par28">Last, the imputed data represents an important tool for guiding epigenomics studies. Such data is far cheaper to produce than observed data, closely matches the data observed from experimental assays, and is useful in a number of contexts to generate hypotheses that can be explored in the wet lab. We showed that imputed data can provide insights into ncHARs; and Ernst and Kellis<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> previously showed that imputed data tend to have a higher signal-to-noise ratio than the observed data, that imputed data can be used to generate high-quality automated genome annotations, and that regions of the genome with high imputed signal tend to be enriched in single nucleotide polymorphisms identified in GWAS. In addition, raw imputed data includes information about signal amplitude and shape, which can provide insight into the types of regulators and binding events that are producing that signal<sup><xref ref-type="bibr" rid="CR29">29</xref>–<xref ref-type="bibr" rid="CR31">31</xref></sup>. In contrast, other methods that use epigenomics data for various prediction tasks<sup><xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR34">34</xref></sup> all impute binarized epigenomics signal (i.e., peak calls), and do not preserve peak shape or amplitude. Raw imputed datasets, such as those produced by PREDICTD, make no assumptions about what research questions they will be used to address, and are widely applicable to any study that analyzes ChIP-seq or DNase-seq data. Thus, in conclusion, imputed data can provide insight into cell type-specific patterns of chromatin state, and act as a powerful hypothesis generator. With just one or two epigenomics maps from a new cell type, PREDICTD can leverage the entire corpus of Roadmap Epigenomics data to generate high-quality predictions of all assays.</p>
</sec>
<sec id="Sec10" sec-type="materials|methods">
<title>Methods</title>
<sec id="Sec11">
<title>Data</title>
<p id="Par29">We downloaded the consolidated genome-wide signal (−log<sub>10</sub>
<italic>p</italic>) coverage tracks in bigWig format from the Roadmap Epigenomics data portal (<ext-link ext-link-type="uri" xlink:href="http://egg2.wustl.edu/roadmap/web_portal/processed_data.html#ChipSeq_DNaseSeq">http://egg2.wustl.edu/roadmap/web_portal/processed_data.html#ChipSeq_DNaseSeq</ext-link>)<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>. These tracks are uniformly processed and currently represent the best curated collection of epigenomic maps available. In addition, these are the same tracks that Ernst and Kellis<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> used to train ChromImpute, making it easier to compare our modeling approaches.</p>
<p id="Par30">All observed signal tracks show a higher variance at regions of high signal than at regions of low signal. In order to stabilize this variance across the genome and to make the data more tractable for PREDICTD’s Gaussian error model, we applied an inverse hyperbolic sine transform. This transformation, which has been used in previous studies of epigenomic maps<sup><xref ref-type="bibr" rid="CR35">35</xref></sup>, is similar to a log transform, but is defined for zero values.</p>
<p id="Par31">After variance stabilization, we defined five training and test splits such that each observed experiment was in one test set. First, we removed any cell types or assays with fewer than five completed experiments to ensure that there would be enough support for training in each dimension in our model. This left 127 cell types, 24 assays, and a total of 1014 completed experiments (66.6% missing). Next, we split these experiments into five test sets, by randomly generating five disjoint subsets of experiments that each contained a stratified sample from across the available cell types and assays. Thus, in each split, 20% of experiments comprise the test set and 80% comprise the training set. In addition to the held out test set, PREDICTD requires a held out validation set to detect model convergence. To ensure that all data in the training dataset contributed equally to the final imputation, the training data for each test set were further split into eight validation sets by cell type/assay pair, so that for any pair of test and validation sets the data split is 20% test (203), 10% validation (100), and 70% training (711). The imputed values reported in this paper are the average test set predictions from eight models trained on the eight validation sets corresponding to that test set. 153 experiments from the first test set were held out of our model tuning procedure as a final test set to show that the model generalizes (Supplementary Fig. <xref ref-type="media" rid="MOESM1">15</xref>).</p>
<p id="Par32">Last, the data for each experiment was averaged into 25 bp bins across the genome using the bedtools map command<sup><xref ref-type="bibr" rid="CR36">36</xref></sup>, and the bins overlapping the ENCODE Pilot Regions and 1 kb windows centered at ncHARs were extracted for training the PREDICTD model. The resulting dataset contains just over 1.3 million bins, or about 1% of the genome. All experiments reported here were conducted using models trained on this subset of the genome. We find that this is more than enough data to train the model, and imputing the entire genome is a relatively simple matter of applying the learned cell type and assay factors across all positions in the genome.</p>
</sec>
<sec id="Sec12">
<title>Model</title>
<p id="Par33">In the following sections, we present the PREDICTD model. As mentioned above, the dataset can be represented as a 3D tensor with the axes being the cell types, the assays, and the locations across the genome. We refer to these axes as the cell type, assay, and genome dimensions, respectively. We use capital letters, <italic>J</italic>, <italic>K</italic>, and <italic>I</italic> to refer to the cardinality of each of these dimensions, and lowercase <italic>j</italic>, <italic>k</italic>, <italic>i</italic>, to refer to specific indices in each corresponding dimension. We use the same convention to refer to the number of latent factors in the model, <italic>L</italic>, and individual latent factor indices, <italic>l</italic>. Each dimension has two learned data structures associated with it: a factor matrix, and a bias vector. We use bold capital letters to refer to the factor matrices, and bold lowercase letters to refer to the bias vectors. The cell type factor matrix and bias vector, and their dimensions are <bold>C</bold><sub><italic>J</italic>×<italic>L</italic></sub>, and <bold>c</bold><sub><italic>J</italic>×1</sub>, respectively. Similarly, for the assay factor matrix and bias vector, the dimensions are: <bold>A</bold><sub><italic>K</italic>×<italic>L</italic></sub>, and <bold>a</bold><sub><italic>K</italic></sub><sub>×</sub><sub>1</sub>, and for the genome dimension: <bold>G</bold><sub><italic>I</italic></sub><sub>×</sub><sub><italic>L</italic></sub>, and <bold>g</bold><sub><italic>I</italic></sub><sub>×</sub><sub>1</sub>.</p>
<p id="Par34">Three main “axes” contribute to the observed biological signal in epigenomic maps: the cell type, the assay, and the genomic location that was measured. Having three axes, on which to distribute the available datasets, naturally lends the full dataset the structure of the 3D tensor (i.e., a stack of 2D matrices), in which the size of one dimension corresponds to the number of cell types in the dataset, another to the number of assays, and the third to the number of genomic locations. One might want to use other qualities or attributes to analyze the data (subject to one’s research question and having enough training data), such as the lab that generated the data, the treatment that was applied, etc., but we are interested in parsing the data along the main cell type, assay, and genomic locus axes so that our model can most generally describe the biological phenomena in normal tissues.</p>
<p id="Par35">Motivated by this 3D structure, we use tensor decomposition because this type of method factors the full data tensor into smaller components that summarize the contributions of each axis to the total data. The key to using tensor decomposition for imputing the missing data is that the smaller components that are learned by the model do not have missing values by definition. This means that when we recombine the components to reconstruct the original tensor, the resulting reconstructed tensor will not only have values that approximate the existing data in the original tensor, but also predicted values for any missing entries in the original tensor. Our particular strategy, known in the literature as PARAFAC, finds a 2D matrix (i.e. one “smaller component”) for each dimension. All such matrices are of the same size along one dimension; this dimension is what we refer to as the number of “latent factors.” The number of latent factors determines the complexity of the model, how well it can capture the information in each axis of the tensor, and thus how well the reconstructed tensor matches the original tensor. Each element of the reconstructed tensor is calculated by multiplying the three corresponding values (one from each matrix) for each latent factor, and then summing those products to arrive at a single number. In order to perform imputation, we train the PREDICTD tensor decomposition model, using the PARAFAC/CANDECOMP procedure<sup><xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR9">9</xref></sup>, which can very naturally model the 3D problem explained above. It also has several additional advantages: it is relatively simple to implement, it has the ability to scale to a large tensor size, and it holds the possibility of producing latent factors that can provide biological insight. Briefly, in this procedure the 3D tensor is factored into three low-rank matrices, each with the same (user specified) number of column vectors. These column vectors are called “latent factors,” and the tensor is reconstructed by summing the outer products of the corresponding latent factor vector triplets. These factor matrices have no missing values, so when they are combined to reconstruct the original data tensor, the reconstructed tensor contains imputed data values that not only approximate the existing tensor data, but also fill in the missing values. More precisely, we start with a 3D data tensor <italic>D</italic> with dimensions <italic>J</italic> × <italic>K</italic> × <italic>I</italic>, where <italic>J</italic> = 127 is the number of cell types, <italic>K</italic> = 24 is the number of assays, and <italic>I</italic> = 1,309,125 is the number of genomic locations (in our case the ENCODE Pilot Regions and 2640 ncHARs at 25 bp resolution), represented by the tensor. This tensor has missing data in fibers along the genome dimension, corresponding to experiments on cell type/assay pairs that have yet to be completed. The completed experiments, corresponding to tensor fibers that contain data, are split into training, validation, and test subsets, or <italic>S</italic><sup>train</sup>, <italic>S</italic><sup>valid</sup>, and <italic>S</italic><sup>test</sup>, respectively.</p>
<p id="Par36">We factor the tensor <italic>D</italic> into three factor matrices and three bias vectors <bold>a</bold>, <bold>c</bold>, and <bold>g</bold>. These bias vectors are meant to capture global biases for each cell type, assay, or genomic location, respectively. Essentially, these terms subtract out the mean for each cell type, assay, and genomic location, which helps to mathematically center all of the data in the tensor around the same point, so that the patterns that we want the model to learn are not obscured by trivial differences in scale along the axes. It is a common strategy for models like PARAFAC, that perform best on data that is all on the same scale.</p>
<p id="Par37">We train the model to find the values of these terms that minimize the following objective function:<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{array}{*{20}{l}} {{\rm {argmin}}_{{\mathbf {{{C}}}},{\mathbf{{{A}}}},{\mathbf{{{G}}}},{\mathbf{{{c}}}},{\mathbf{{{a}}}},{\mathbf{{{g}}}}}} {\mathop {\sum}\limits_{j,k,i \in S^{{\rm {train}}}} {\left( {D_{j,k,i}^{{\rm {train}}} - \left[ {\mathop {\sum }\limits_{l = 1}^L {\mathbf {C}}_{j,l} \ast {\mathbf{A}}_{k,l} \ast {\mathbf{G}}_{i,l} + {\mathbf{c}}_j + {\mathbf{a}}_k + {\mathbf{g}}_i} \right]} \right)^2} } \hfill \\ {\quad + \lambda _{\mathbf{{{C}}}}\parallel {\mathbf{C}}\parallel _2^2 + \lambda _{\mathbf{{{A}}}}\parallel {\mathbf{A}}\parallel _2^2 + \lambda _{\mathbf{{{G}}}}\parallel {\mathbf{G}}\parallel _2^2} \hfill \end{array}$$\end{document}</tex-math><mml:math display="block" id="M2"><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:msub><mml:mrow><mml:mi mathvariant="normal">argmin</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold">C</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">G</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">c</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">a</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">g</mml:mi></mml:mrow></mml:msub><mml:munder><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">train</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munder><mml:msup><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msubsup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">train</mml:mi></mml:mrow></mml:msubsup><mml:mo>-</mml:mo><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>l</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>L</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mrow><mml:mi mathvariant="bold">C</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>*</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">A</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>*</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">G</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">c</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">a</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">g</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em"></mml:mspace><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold">C</mml:mi></mml:mrow></mml:msub><mml:mo>∥</mml:mo><mml:mi mathvariant="bold">C</mml:mi><mml:msubsup><mml:mrow><mml:mo>∥</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold">A</mml:mi></mml:mrow></mml:msub><mml:mo>∥</mml:mo><mml:mi mathvariant="bold">A</mml:mi><mml:msubsup><mml:mrow><mml:mo>∥</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold">G</mml:mi></mml:mrow></mml:msub><mml:mo>∥</mml:mo><mml:mi mathvariant="bold">G</mml:mi><mml:msubsup><mml:mrow><mml:mo>∥</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic position="anchor" xlink:href="41467_2018_3635_Article_Equ1.gif"></graphic></alternatives></disp-formula></p>
<p id="Par38">The objective function (Eq. (<xref ref-type="" rid="Equ1">1</xref>)) has two main parts. The first part calculates the squared error between the training data, <inline-formula id="IEq1"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$D_{j,k,i}^{{\mathrm {train}}}$$\end{document}</tex-math><mml:math id="M4"><mml:msubsup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">train</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq1.gif"></inline-graphic></alternatives></inline-formula> and the model’s prediction, <inline-formula id="IEq2"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathop {\sum}\nolimits_{l = 1}^L {{\mathbf{{C}}}_{j,l}} \ast {\mathbf{{A}}}_{k,l} \ast {\mathbf{{G}}}_{i,l} + {\mathbf{{c}}}_j + {\mathbf{{a}}}_k + {\mathbf{{g}}}_i$$\end{document}</tex-math><mml:math id="M6"><mml:msubsup><mml:mrow><mml:mo> ∑</mml:mo></mml:mrow><mml:mrow><mml:mi>l</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>L</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi mathvariant="bold">C</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>*</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">A</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>*</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">G</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">c</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">a</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">g</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq2.gif"></inline-graphic></alternatives></inline-formula>. This term penalizes the distance between the imputed and observed data. The last three terms, <inline-formula id="IEq3"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\lambda _{\mathbf{{C}}}\parallel {\mathbf{{C}}}\parallel _2^2 + \lambda _{\mathbf{{A}}}\parallel {\mathbf{{A}}}\parallel _2^2 + \lambda _{\mathbf{{G}}}\parallel {\mathbf{{G}}}\parallel _2^2$$\end{document}</tex-math><mml:math id="M8"><mml:msub><mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold">C</mml:mi></mml:mrow></mml:msub><mml:mo>∥</mml:mo><mml:mi mathvariant="bold">C</mml:mi><mml:msubsup><mml:mrow><mml:mo>∥</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold">A</mml:mi></mml:mrow></mml:msub><mml:mo>∥</mml:mo><mml:mi mathvariant="bold">A</mml:mi><mml:msubsup><mml:mrow><mml:mo>∥</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold">G</mml:mi></mml:mrow></mml:msub><mml:mo>∥</mml:mo><mml:mi mathvariant="bold">G</mml:mi><mml:msubsup><mml:mrow><mml:mo>∥</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq3.gif"></inline-graphic></alternatives></inline-formula> implement L2 regularization on the factor matrices. This type of regularization penalizes large parameter values, and thus causes the model to strongly prefer a solution with small values on the parameters. Such regularization helps to reduce the flexibility of the model and helps to avoid overfitting the training data. Furthermore, we note that our choice of PARAFAC, which is a linear model with a limited number of latent dimensions, is itself a form of regularization in the sense that such a model is less flexible than more complex models, like deep neural nets. PARAFAC is therefore inherently less prone to overfitting the training data, compared to a nonlinear model given the same model dimensionality.</p>
<p id="Par39">Equation (<xref ref-type="" rid="Equ1">1</xref>) cannot be solved analytically, so we solve it numerically using stochastic gradient descent (SGD). In SGD, we first initialize the three factor matrices with random values from a uniform distribution on the domain (−0.33 to 0.33), and the three bias vectors with the mean value from each corresponding plane in the tensor. Then, we randomly iterate over the training set data points in the tensor at each iteration, calculating the gradient of the objective function (Eq. (<xref ref-type="" rid="Equ1">1</xref>)) with respect to each factor matrix and bias vector, and then adding a fraction of this gradient to the corresponding parameter values. Over time, as more and more gradients are calculated and used to update the parameter values in the factor matrices and bias vectors, the model as a whole “moves” along the high-dimensional surface defined by the objective function and “down” toward a minimum that (ideally) represents a good solution. We track the model’s progress toward this solution by periodically saving the value of the MSE on the heldout validation data points. Eventually, the validation MSE stops decreasing, which indicates that the model parameters have converged on a solution. Importantly, there is no guarantee that this solution is the best possible one, as in the case of PREDICTD (and PARAFAC more generally) the objective function is not convex.</p>
<p id="Par40">We should also note that PREDICTD incorporates several other modifications to this SGD procedure to improve the speed, reliability, and accuracy of training. First, in order to take full advantage of our compute cluster, we use parallel SGD<sup><xref ref-type="bibr" rid="CR37">37</xref></sup>, which is discussed in detail in the Implementation section below. And second, to improve model convergence under SGD training, PREDICTD implements the Adam optimizer<sup><xref ref-type="bibr" rid="CR38">38</xref></sup> with Nesterov Accelerated Gradient<sup><xref ref-type="bibr" rid="CR39">39</xref></sup> (Fig. <xref ref-type="fig" rid="Fig1">1</xref>). Finally, we note that because there is no non-negativity constraint on the model training, a small fraction of imputed values are negative (Supplementary Fig. <xref ref-type="media" rid="MOESM1">12</xref>). Negative values are invalid for −log<sub>10</sub>
<italic>p</italic>-value tracks, so we set any such imputed values to zero in the final output.</p>
<p id="Par41">There are many tensor decomposition methods (reviewed in ref. <sup><xref ref-type="bibr" rid="CR23">23</xref></sup>); however, we chose the PARAFAC model because of its relative simplicity. It is not only straightforward to implement and parallelize, but it also requires fewer parameters than other tensor factorization methods<sup><xref ref-type="bibr" rid="CR22">22</xref>,<xref ref-type="bibr" rid="CR23">23</xref></sup>. Note that we implemented the model as described in the original publication<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>, and we included no additional constraints on the model during training except what was imposed by the L2 regularization terms in the objective and the constraints naturally imposed by using a relatively simple linear model on complex data with potentially nonlinear underlying factors. The PARAFAC model also has the nice property that as long as mild conditions hold it will find a solution that is unique with respect to rotation transformations<sup><xref ref-type="bibr" rid="CR22">22</xref>,<xref ref-type="bibr" rid="CR23">23</xref></sup>; this is not a property of other tensor factorization approaches, including Tucker decomposition, which was used in ref. <sup><xref ref-type="bibr" rid="CR25">25</xref></sup>.</p>
</sec>
<sec id="Sec13">
<title>Implementation</title>
<p id="Par42">PREDICTD is implemented in Python 2.7 and built using the Apache Spark 1.6.2 distributed computation framework (<ext-link ext-link-type="uri" xlink:href="http://spark.apache.org">http://spark.apache.org</ext-link>). The code is open-source and available on BitBucket (<ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/noblelab/predictd">https://bitbucket.org/noblelab/predictd</ext-link>), and the environment we used to train the model is available on Amazon Web Services (AWS) as an Amazon Machine Image (see the BitBucket repository for info). Models were trained using AWS Elastic Compute Cloud (EC2) (<ext-link ext-link-type="uri" xlink:href="http://aws.amazon.com">http://aws.amazon.com</ext-link>) and Microsoft Azure Spark on HDInsight (<ext-link ext-link-type="uri" xlink:href="http://azure.microsoft.com">http://azure.microsoft.com</ext-link>). We bootstrapped an EC2 cluster running Apache Spark 1.6.2 by running the spark-ec2 script (<ext-link ext-link-type="uri" xlink:href="https://github.com/amplab/spark-ec2">https://github.com/amplab/spark-ec2</ext-link>) on a small EC2 instance (e.g., m3.medium) that we subsequently terminated after the cluster was up and running. Standard cluster configuration was a single m4.xlarge head node instance and one r3.8xlarge worker instance, giving a total cluster size of two nodes, 36 cores, and 260 GB of memory. Whenever possible, we used SPOT instances to make the computation more affordable. Microsoft Azure HDInsight clusters had similar resources. All data input to the model and all model output was written to cloud storage; either Simple Storage Service (S3) on AWS, or Blob Storage on Azure.</p>
<p id="Par43">The data tensor is assembled into a Spark Resilient Distributed Dataset Structure (RDD) and partitioned among the cluster nodes, such that each partition is stored on a single node and contains the data for 1000 genomic loci. This results in about 1300 partitions. The data in each of the 1000 elements in each partition is represented as a scipy.sparse.csr_matrix<sup><xref ref-type="bibr" rid="CR40">40</xref></sup> object storing all observed data values for a particular genomic position. Each element of the data RDD also contains the corresponding entries from the <bold>G</bold> factor matrix, <bold>g</bold> bias vector, and data structures for the Adam optimizer<sup><xref ref-type="bibr" rid="CR38">38</xref></sup> that are specific to each genomic locus (Fig. <xref ref-type="fig" rid="Fig1">1</xref>).</p>
<p id="Par44">The first step of training selects a random 1% of available genomic positions (~13,000 positions, or ~0.01% of all 25 bp bins in the genome) for training the cell type and assay parameters. Although this seems like a small sample of the genome, our results indicate that this is enough data to faithfully represent the distribution of signal across the tensor. We do see a slight improvement in performance if we include more of the genome in training, but at a cost of correspondingly increased memory usage and compute time. The main training phase then proceeds through a series of parallel SGD<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> iterations (Fig. <xref ref-type="fig" rid="Fig1">1c</xref>) on this subset of positions. Briefly, at the start of each parallel iteration, copies of the cell type and assay parameters, <bold>C</bold>, <bold>c</bold>, <bold>A</bold>, and <bold>a</bold>, are sent out to each partition. Each partition undergoes local SGD for 5000 iterations and applies the updates to the local copies of the assay and cell type parameters. The updated cell type and assay parameter values are then passed back to the master node where they are averaged element-wise with the results from all other partitions. The resulting averaged parameters are then copied and distributed to the partitions for the next round of parallel SGD. Note that over all rounds of SGD, we use a learning rate decay schedule of <italic>η</italic><sub><italic>t</italic></sub> = <italic>η</italic> × (<italic>φ</italic><sub><italic>η</italic></sub>)<sup><italic>t</italic>−1</sup>, where the learning rate decay parameter <italic>φ</italic><sub><italic>η</italic></sub> = 1 − 1<italic>e</italic><sup>−6</sup>, and similarly for the Adam first moment parameter: <italic>β</italic>1<sub><italic>t</italic></sub> = <italic>β</italic>1 × (<italic>φ</italic><sub><italic>β</italic>1</sub>)<sup><italic>t</italic>−1</sup>, where <italic>φ</italic><sub><italic>β</italic>1</sub> = 1 − 1<italic>e</italic><sup>−6</sup>.</p>
<p id="Par45">Averaging the parameters after the parallel SGD updates allows the model to share information across the genome dimension; however, the averaging can initially make it harder for the model to converge. The <bold>C</bold> and <bold>A</bold> matrices are initialized randomly from a uniform distribution on the domain (−0.33, 0.33), and thus during the first round of parallel SGD, the independent nature of the local updates can lead to inconsistent updates to the latent factors in different partitions. When the results of these inconsistent updates are averaged, they produce poor parameter values, and it then takes many parallel iterations before the parameter values begin to converge. To combat this effect, the main training phase begins with a burn-in stage before attempting parallel SGD. In the burn-in stage, local SGD is performed for half an epoch on 8000 genomic loci in a single partition, and after this, the updated <bold>C</bold>, <bold>c</bold>, <bold>A</bold>, and <bold>a</bold> parameters are used in a round of local SGD across the entire training subset to bring the genome dimension up to the same number of updates. This burn-in procedure allows the latent factors to have a consistent initial “identity” across the cluster when starting the parallel SGD updates.</p>
<p id="Par46">Every three parallel SGD iterations, the MSE is computed for each subset of data (training, validation, and test) and recorded. If the validation MSE is the lowest yet encountered by the model, the parameters from that iteration are copied and saved. Once a minimum number of parallel iterations have completed, the model tests for convergence by collecting the MSE on the validation set for iterations <italic>t</italic> − 35 to <italic>t</italic> − 20 (window 1), and <italic>t</italic> − 15 to <italic>t</italic> (window 2), and using a Wilcoxon rank-sum test to determine if window 2 + 1<italic>e</italic><sup>−5</sup> &gt; window 1, with one-tailed <italic>p</italic> &lt; 0.05. If this convergence criterion is met, then one of two things happens. First, the model will check whether or not the user has requested a line search on the learning rate. If so, then it will reset the cell type, assay, and genome parameters to those found at the iteration with the minimum validation MSE and resume parallel SGD after halving the learning rate, and reducing the Adam first moment weight <italic>β</italic>1<sub>new</sub> = <italic>β</italic>1<sub>old</sub> − (1.0 − <italic>β</italic>1<sub>old</sub>). When training the model, we used a line search of length three, so the model was restarted from the current minimum and learning rate halved and <italic>β</italic>1 adjusted three times. See Supplementary Fig. <xref ref-type="media" rid="MOESM1">18</xref> for an example of what the error curves from the parallel SGD look like after training a PREDICTD model. Once the line search is complete, or if no line search was requested, then the model stops parallel SGD, fixes the assay and cell type parameters, and finishes training on the genome parameters only.</p>
<p id="Par47">Once the main phase of training is complete, the last phase of model training applies the cell type and assay parameters across all genomic positions. This is accomplished by fixing the cell type and assay parameters and calculating the second-order solution on the genome parameters only. This requires just a single parameter update per genomic position, which is possible using least squares because fixing the cell type and assay parameters makes our objective function convex over the genome parameters. Once the final genome parameters are calculated, the assay, cell type, and genome parameters are saved to cloud storage, and the imputed tensor is computed and saved to the cloud for further analysis. On average, the entire training takes about 750 parallel iterations, and about 2 h (wall-clock time).</p>
<p id="Par48">The above procedure is executed for every validation set associated with a given test set, and then the final imputed values for the held out test datasets are calculated as a simple average of the corresponding imputed values from each validation set. Thus, for the results we report here, each imputed value represents the consensus of eight trained models.</p>
</sec>
<sec id="Sec14">
<title>Hyperparameter selection</title>
<p id="Par49">One of the challenges of working with this type of model is that there are many hyperparameters to tune. These include the number of latent factors <italic>L</italic>, the learning rate <italic>η</italic>, the learning rate decay rate <italic>φ</italic><sub><italic>η</italic></sub>, the Adam first moment coefficient <italic>β</italic><sub>1</sub> and its decay rate <italic>φ</italic><sub><italic>β</italic>1</sub>, a regularization coefficient for each latent parameter matrix (<italic>λ</italic><sub><bold>A</bold></sub>, <italic>λ</italic><sub><bold>C</bold></sub>, <italic>λ</italic><sub><bold>G</bold></sub>), and one more regularization parameter for the second-order genome updates (<italic>λ</italic><sub><bold>G</bold>2</sub>).</p>
<p id="Par50">Of these hyperparameters, perhaps the most important one for PREDICTD performance is the number of latent factors. This setting controls the dimensionality of the model, and thus the number of parameters that must be optimized during model training. Ideally, assuming a perfect match between the modeling approach and the data, the number of latent factors will equal the true underlying dimensionality of the dataset. However, in practice this assumption does not really hold. First, real world data is often noisy enough that the “true” dimensionality of the input data is the full rank, and so instead we are forced to use fewer latent factors that approximate the dimensionality of theoretical, noiseless, data. Second, PREDICTD implements the original PARAFAC specification<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>, which relies on simple linear combinations of the corresponding latent factors in each dimension. However, in real data there could be factors that have nonlinear relationships, and there is evidence that PARAFAC in some cases will attempt to fit these relationships by adding additional factors to explicitly take them into account as if they are additional linear terms. This phenomenon was explored in an example from the original PARAFAC paper in which the best PARAFAC solution for a rank-2 synthetic dataset with an interaction between the two latent dimensions used three latent factors: one for each dimension, plus another for the product of the two<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>. In the end, the best number of latent factors to use is simply the number that minimizes the error of the model while preserving its generalization performance, and this must be evaluated empirically.</p>
<p id="Par51">Empirically searching for the best number of latent factors is nontrivial. The number of latent factors changes the dimensionality of the model, and thus the balance between bias and variance, which means that the regularization coefficients must be tuned in parallel with the latent factors. A simple strategy that has been shown to be surprisingly effective searching high-dimensional hyperparameter space is simple random search, in which different random hyperparameter values are tested until a combination is found that provides good performance of the model<sup><xref ref-type="bibr" rid="CR41">41</xref></sup>. Although the simplicity of the random choice strategy makes it very appealing, it can still require many iterations before one is confident that good hyperparameters have been found, which is a severe drawback when trying to optimize settings for a model like PREDICTD that takes multiple hours to train. Thus, hoping to find good hyperparameter settings in as few iterations as possible, we decided to use an auto-tuning software package called Spearmint<sup><xref ref-type="bibr" rid="CR42">42</xref></sup>. Spearmint treats the PREDICTD model as a black box function and iteratively tries different hyperparameter settings; it uses Bayesian optimization to fit a Gaussian process that can predict the hyperparameter settings that will maximize the improvement in model performance in the next iteration. There is still some debate in the field as to whether or not this kind of auto-tuning strategy reliably finds better hyperparameter values than simple random search<sup><xref ref-type="bibr" rid="CR43">43</xref></sup>; however, evidence shows that such Bayesian approaches tend to converge to a good selection of hyperparameters in fewer iterations than random search<sup><xref ref-type="bibr" rid="CR42">42</xref></sup>, and thus minimize the time spent searching hyperparameters.</p>
<p id="Par52">We ran Spearmint multiple times as we developed the PREDICTD model, each time holding out the first test set so that we would have some data to test the generalizability of PREDICTD. Early Spearmint runs and some manual grid search of the hyperparameters suggested that 100 latent factors was a good setting for the model dimensionality. Once we settled on 100 latent factors, we ran Spearmint again to fine tune the learning rate and regularization coefficients. We let it train 188 PREDICTD models with different hyperparameter settings and selected the settings from the model that gave the lowest observed validation MSE. During this process, we discovered that PREDICTD is relatively insensitive to the particular values of the three regularization coefficients <italic>λ</italic><sub><bold>C</bold></sub>, <italic>λ</italic><sub><bold>A</bold></sub>, and <italic>λ</italic><sub><bold>G</bold></sub>, but that it seemed to prefer extremely low values (essentially, no regularization) on at least one of the matrix factors. In contrast, the hyperparameter search revealed that PREDICTD performance depends more heavily on particular values for the learning rate, <italic>η</italic>, and the second-order genome update regularization, <italic>λ</italic><sub><bold>G</bold>2</sub>. We also found that our imputation scheme of averaging eight models trained with different validation sets imposed extra regularization on the ultimate averaged solution, and that to achieve the best generalizability of our averaged solution we had to compensate for the regularization introduced by the averaging by choosing a lower <italic>λ</italic><sub><bold>G</bold>2</sub> than the one suggested by Spearmint as the best setting for a single model. After trying different <italic>λ</italic><sub><bold>G</bold>2</sub> values (Supplementary Fig. <xref ref-type="media" rid="MOESM1">21</xref>), we decided to reduce <italic>λ</italic><sub><bold>G</bold>2</sub> by a factor of 10 since this showed that the validation MSE stayed roughly constant or a little bit lower than the minimum validation MSE from the parallel SGD iterations, and thus we were not lowering the regularization so much that the model overfit and increased the validation MSE. Our final chosen hyperparameter values are given in Table <xref ref-type="table" rid="Tab3">3</xref>.<table-wrap id="Tab3"><label>Table 3</label><caption><p>Hyperparameter values</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Hyperparameter</th><th>Value</th><th>Spearmint?</th></tr></thead><tbody><tr><td>
<italic>η</italic>
</td><td>0.0045</td><td>Y</td></tr><tr><td>
<italic>φ</italic>
<sub><italic>η</italic></sub>
</td><td>1–1e<sup>−6</sup></td><td>N</td></tr><tr><td>
<italic>β</italic>
<sub>1</sub>
</td><td>0.9</td><td>N</td></tr><tr><td>
<italic>φ</italic>
<sub><italic>β</italic></sub>
<sub>1</sub>
</td><td>1–1e<sup>−6</sup></td><td>N</td></tr><tr><td>
<italic>β</italic>
<sub>2</sub>
</td><td>0.999</td><td>N</td></tr><tr><td>
<italic>L</italic>
</td><td>100</td><td>Y*</td></tr><tr><td>
<italic>λ</italic>
<sub><bold>C</bold></sub>
</td><td>4.792</td><td>Y</td></tr><tr><td>
<italic>λ</italic>
<sub><bold>A</bold></sub>
</td><td>8.757e<sup>−27</sup></td><td>Y</td></tr><tr><td>
<italic>λ</italic>
<sub><bold>G</bold></sub>
</td><td>8.757e<sup>−27</sup></td><td>Y</td></tr><tr><td>
<inline-formula id="IEq4"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\lambda_{{\bf{{G}}}_2}$$\end{document}</tex-math><mml:math id="M10"><mml:msub><mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">G</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq4.gif"></inline-graphic></alternatives></inline-formula>
</td><td>0.4122</td><td>Y*</td></tr></tbody></table><table-wrap-foot><p>The third column indicates whether the hyperparameter value was selected using Spearmint, and an asterisk (*) indicates the final value was tuned by hand after Spearmint optimization.</p></table-wrap-foot></table-wrap></p>
<p id="Par53">In addition to using Spearmint for model selection, we also used it to systematically explore the effects of changing the model dimensionality by changing the number of latent factors (Supplementary Figs. <xref ref-type="media" rid="MOESM1">19</xref>, <xref ref-type="media" rid="MOESM1">20</xref>). In this hyperparameter search, we fixed the dimensionality at one of 17 levels between two and 512 latent factors, and then used Spearmint to optimize the other hyperparameters (<italic>η</italic>, <italic>λ</italic><sub><bold>C</bold></sub>, <italic>λ</italic><sub><bold>A</bold></sub>, <italic>λ</italic><sub><bold>G</bold></sub>, and <italic>λ</italic><sub><bold>G</bold>2</sub>). We allowed the Spearmint runs with larger numbers of latent factors to train longer to give them more chances to explore the more complex solution space of these higher dimensionality models. We used a systematic stopping criterion as follows: each Spearmint search had to train for at least 50 iterations or 40% of the number of latent factors, whichever was more, and had to stop after it had trained at least 20 iterations or 15% of the number of latent factors, whichever was more, past its best result (Supplementary Fig. <xref ref-type="media" rid="MOESM1">19</xref> blue/red bars). After this search, we noticed that there was a plateau in the validation MSE from 16 latent factors to 64 latent factors, so to gain more resolution on this range of latent factors, we trained the 32 and 64 Spearmint searches out to 120 iterations. We found that the solutions for both models improved, and 64 latent factors improved more than 32 latent factors, but that neither model found a better solution than 100 latent factors (Supplementary Fig. <xref ref-type="media" rid="MOESM1">19</xref> brown/orange bars). In order to avoid biasing Spearmint’s choice of hyperparameter settings for a particular validation set or subset of genomic locations, we had allowed the validation set and the training subset of genomic windows to vary randomly over the course of the hyperparameter search. However, this meant that any given best Spearmint result could still be due to the model getting “lucky” and finding a validation set or set of genomic windows that was particularly favorable for training. To convince ourselves that the trend our Spearmint search revealed is real, we took the best hyperparameter settings for each latent factor level (for 32 and 64 latent factors these were the results of the expanded search) and trained ten models each with fixed validation sets and a fixed set of genomic windows, only varying the random initialization of the factor matrices from model to model (Supplementary Fig. <xref ref-type="media" rid="MOESM1">20</xref>). The results show the same trend as a function of model dimensionality as in our original hyperparameter search (Supplementary Fig. <xref ref-type="media" rid="MOESM1">19</xref>), and we also verified that the distribution of validation MSE for 64 latent factors is significantly different than that for 100 latent factors (Wilcoxon rank-sum test <italic>p</italic> &lt; 0.05).</p>
<p id="Par54">To save time on model training during the Spearmint iterations, we relaxed the convergence criteria to use a larger shift between the two samples in the Wilcoxon rank-sum test (5<italic>e</italic><sup>−05</sup> instead of 1<italic>e</italic><sup>−05</sup>) and we only did a single line search after the model first converged instead of three. It is important to note that, despite our efforts, there may be even better hyperparameter settings that our search did not encounter. As new discoveries concerning hyperparameter tuning unfold in the machine learning literature the settings for PREDICTD can be revisited to perhaps further increase its performance.</p>
</sec>
<sec id="Sec15">
<title>Imputing the whole genome</title>
<p id="Par55">Although for the purpose of analyzing the PREDICTD model we only imputed about 1% of the genome, we generated whole genome imputed tracks in bigWig format for the UCSC Genome Browser. These tracks are available for download from the ENCODE project website (<ext-link ext-link-type="uri" xlink:href="http://encodeproject.org">http://encodeproject.org</ext-link>).</p>
</sec>
<sec id="Sec16">
<title>Imputing data for a novel cell type</title>
<p id="Par56">We provide a tutorial on the BitBucket site (<ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/noblelab/predictd/wiki/Home">https://bitbucket.org/noblelab/predictd/wiki/Home</ext-link>) that details how a user can train a PREDICTD model to generate imputed data for a new cell type. Briefly, a user can upload −<italic>log</italic><sub>10</sub>
<italic>p</italic>-value tracks in bigWig format to an Amazon S3 bucket, and then PREDICTD will add that data to the Roadmap Epigenomics tensor, train the model, and write imputed data for the new cell type back to S3 in bigWig format. The tutorial demonstrates how this is done with seven datasets from the Fetal Spinal Cord cell type that we downloaded from the ENCODE portal (<ext-link ext-link-type="uri" xlink:href="http://www.encodeproject.org">http://www.encodeproject.org</ext-link>).</p>
</sec>
<sec id="Sec17">
<title>Computing resource requirements</title>
<p id="Par57">The resource requirements of PREDICTD are not very great considering the size of the model. We find that training a single PREDICTD model on the tensor described in the paper (127 × 24 × 1.3e6) takes on average just under two hours on a two node cluster consisting of a head node with four cores (Intel Xeon E5-2676 v3 Haswell or Xeon E5-2686 v4 Broadwell processors) and 16 GB of memory (e.g., an m4.xlarge AWS EC2 instance), and a worker node with 32 cores (Intel Xeon E5-2670 v2 Ivy Bridge) and 244 GB of memory (e.g., an r3.8xlarge AWS EC2 instance). For this manuscript, each experiment was imputed as an average of eight models trained with random starts and different validation sets, so one could train these models to use for imputation in about 16 h. After training the models, imputing values for the limited subset of genomic positions used for training is quite fast. However, if one needs to impute the whole genome it takes longer because the learned cell type and assay factors must be applied across all genomic locations. To do this without having to store the entire tensor in memory at once (all genomic positions and no missing values), we read in data for batches of genomic positions, train the corresponding genome parameters based on the existing cell type and assay parameters, and then write out the imputed values for each batch. For imputing whole genome data for one new cell type (that is, 24 whole genome imputed experiments) the cluster configuration described above requires an additional 24 h, for a total of ~40 h for model training and whole genome imputation.</p>
<p id="Par58">In this manuscript we present a more extreme case in which we impute all 3048 possible experiments in the Roadmap Epigenomics tensor at 25 bp resolution, and to do this we used a larger worker node to increase throughput. If we use a x1.16xlarge instance as the worker node, which has 64 cores (Intel Xeon E7-8880 v3 Haswell) and 976 GB of memory, we can use the trained models to impute the whole genome for all 3048 experiments in approximately 88 h. The resulting imputed tracks represent the consensus of eight models for each experiment, and these experiments were split into five test sets, giving a total of 40 models that took about 76.5 h to train. Thus, training and imputation for the 3048 Roadmap Epigenomics tracks takes a total time of ~164.5 h.</p>
<p id="Par59">To compare with ChromImpute’s run time, we can convert this wall-clock time to an approximate number of CPU hours required to run PREDICTD on the full tensor. Using the smaller cluster to train the 48 models, we calculate PREDICTD requires about 36 cores × 76.5 h = 2754 CPU hours. Switching to the larger cluster for imputation, we find that PREDICTD consumes about an additional 68 cores × 88 h = 5984 CPU hours. Thus, in total PREDICTD can train the models and impute 3048 experiments in ~8738 CPU hours. This run time is more than an order of magnitude less than that quoted in the ChromImpute supplement<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>, which reports that ChromImpute requires a total run time of 103,560 CPU hours for model training and output generation. Even taking into account the fact that we imputed about 25% fewer experiments for this paper than were imputed in the ChromImpute manuscript, ChromImpute still requires on the order of ten times more CPU hours to train the models and impute the Roadmap Epigenomics tensor than PREDICTD does.</p>
</sec>
<sec id="Sec18">
<title>Advantages of the consumer cloud</title>
<p id="Par60">Cloud computing is becoming a powerful tool for bioinformatics. Large consortia such as the ENCODE<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> and The Cancer Genome Atlas (<ext-link ext-link-type="uri" xlink:href="http://cancergenome.nih.gov">http://cancergenome.nih.gov</ext-link>) are making their data available on cloud platforms. As computational analyses grow more complex and require more computing resources to handle larger datasets, the cloud offers two distinct advantages. First, cloud services provide a centralized way to host large datasets used by the community that makes data storage, versioning, and access more simple and efficient. Transferring gigabytes, or even terabytes, of data is slow and expensive in terms of network bandwidth, but moving code and computation to the data is fast and cheap. Second, in addition to hosting datasets, cloud services can host saved computing environments. Such virtual machine images can help with reproducibility of results for complex analyses because the code can be written in such a way that other users can not only use the same code and data as the original authors, but they can run the analysis in the same computing environment. One downside of cloud computing for labs that have access to a local cluster is that cloud resources are charged by usage; nevertheless, generating high-quality imputed data using PREDICTD is extremely cost effective compared to collecting the observed data. Training the models and generating the final imputed data for this paper costs on the order of US $0.10 per dataset, which is orders of magnitude lower than the cost of completing these experiments in the wet lab, and this cost can be expected to drop as computational resources become cheaper and more efficient optimization methods are devised.</p>
</sec>
<sec id="Sec19">
<title>Imputation quality measures</title>
<p id="Par61">We generated tracks for the imputed data by extracting the data for each 25 bp bin from the imputed results, writing the results to file in bedGraph format, then converting to bigWig using the bedGraphToBigWig utility from UCSC. Imputed tracks were visually inspected alongside Roadmap Consolidated data tracks and peak calls in the UCSC Genome Browser. We did not reverse the variance stabilizing inverse hyperbolic sine transform when evaluating model performance. This is appropriate because it maintains the Gaussian error model that underlies the PREDICTD optimization.</p>
<p id="Par62">We also implemented ten different quality assessment measures (listed below), the last seven of which were first reported for ChromImpute<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. We report these measures for heldout test set experiments and compute them over the ENCODE Pilot Regions (Supplementary Fig. <xref ref-type="media" rid="MOESM1">14</xref>).<list list-type="bullet"><list-item><p id="Par63">MSEglobal: Mean squared error between the imputed and observed values at all available genomic positions.</p></list-item><list-item><p id="Par64">MSE1obs: Mean squared error between the imputed and observed values in the top 1% of genomic positions ranked by the observed signal values.</p></list-item><list-item><p id="Par65">MSE1imp: Mean squared error between the imputed and observed values in the top 1% of genomic positions ranked by the imputed signal values.<list list-type="bullet"><list-item><p id="Par66">MSE1imppred: Meansquared error between the imputed and observed values in the top 1% of genomic positions ranked by the signal values imputed by PREDICTD.</p></list-item><list-item><p id="Par67">MSE1impchrimp: Mean squared error between the imputed and observed values in the top 1% of genomic positions ranked by the signal values imputed by ChromImpute.</p></list-item><list-item><p id="Par68">MSE1impme: Mean squared error between the imputed and observed values in the top 1% of genomic positions ranked by the signal values imputed by Main Effects.</p></list-item></list></p></list-item></list><list list-type="bullet"><list-item><p id="Par69">GWcorr: Pearson correlation between imputed and observed values at all available genomic positions.</p></list-item><list-item><p id="Par70">Match1: Percentage of the top 1% of genomic positions ranked by observed signal that are also found in the top 1% of genomic positions ranked by imputed signal.</p></list-item><list-item><p id="Par71">Catch1obs: Percentage of the top 1% of genomic positions ranked by observed signal that are also found in the top 5% of genomic positions ranked by imputed signal.</p></list-item><list-item><p id="Par72">Catch1imp: Percentage of top 1% of genomic positions ranked by imputed signal that are also found in the top 5% of genomic positions ranked by observed signal.</p></list-item><list-item><p id="Par73">AucObs1: Recovery of the top 1% of genomic positions ranked by observed signal from all genomic positions ranked by imputed signal calculated as the area under the curve of the receiver operating characteristic.</p></list-item><list-item><p id="Par74">AucImp1: Recovery of the top 1% of genomic positions ranked by imputed signal from all genomic positions ranked by observed signal calculated as the area under the curve of the receiver operating characteristic.</p></list-item><list-item><p id="Par75">CatchPeakObs: Recovery of genomic positions at called peaks in observed signal from all genomic positions ranked by imputed signal calculated as the area under the curve of the receiver operating characteristic.</p></list-item></list></p>
</sec>
<sec id="Sec20">
<title>Analyzing model parameters</title>
<p id="Par76">The parameter values corresponding to individual latent factors are not individually interpretable, but intuitively we can understand that each latent factor describes some pattern in the data that the model finds useful for imputation. For example, the first latent factor (i.e., column 0 in each of the three factor matrices) might contain values that capture a pattern of high signal in promoter marks, in blood cell types, at active genes. In such a case the value at this latent factor for a particular assay might suggest how often that mark is found at promoters; for a particular cell type its relatedness to blood; and for a genomic locus how many promoter-associated features occur there in blood cell types. If these three conditions hold, then the model is likely to have more extreme values for these parameters that end-up imputing a high value for that cell type/assay pair at that genomic position.</p>
</sec>
<sec id="Sec21">
<title>Clustering cell types and assays</title>
<p id="Par77">The rows of the cell type and assay factor matrices, with each row containing the model parameters for a particular cell type or assay, respectively, were clustered using hierarchical clustering. This analysis was implemented in Python 2.7 using scipy.spatial.distance.pdist with metric = 'cosine' to generate the distance matrix, and scipy.cluster.hierarchy.linkage with method = 'average' to generate clusters. The columns of each factor matrix (i.e., the latent factor vectors) were also clustered in the same way to help with visualizing the clusters. The parameter values were plotted as a heat map with rows and columns ordered according to the results of the hierarchical clustering.</p>
</sec>
<sec id="Sec22">
<title>Summarizing latent factor patterns at genomic elements</title>
<p id="Par78">The genome factor matrix is too large to usefully visualize as a heat map, so we sought to aggregate the parameter values across different types of genomic features. We mapped all annotated protein-coding genes from the GENCODE v19 human genome annotation<sup><xref ref-type="bibr" rid="CR11">11</xref></sup> (<ext-link ext-link-type="uri" xlink:href="https://www.gencodegenes.org/releases/19.html">https://www.gencodegenes.org/releases/19.html</ext-link>) with a designated primary transcript isoform (called by the APPRIS pipeline) to a canonical gene model consisting of nine components: promoter, 5′ UTR, first exon, first intron, middle exon, middle intron, last exon, last intron, and 3′ UTR. The promoter for each gene was defined as the 2 kb region flanking the 5′ end of the gene annotation, while the other components were either taken directly from the GENCODE annotation (5′ UTR, exons, 3′ UTR) or were inferred (introns). For each gene, each component was split into ten evenly spaced bins and the values for each latent factor were averaged so that there was a single value for each latent factor for each bin. Coding regions for genes with a single exon or two exons were mapped only to first exon, or first exon and last exon components, respectively. Genes with only one or two introns were handled analogously. For genes with multiple middle exons and introns, each exon/intron was binned independently and the data for each middle exon/intron bin was averaged across all middle exons/introns. In order to plot the results, outlier values in the bins (defined as any values outside 1.5 × IQR) were removed and the remaining values averaged across corresponding bins for all binned gene models. This resulted in a matrix containing latent factors on the rows and gene model bins on the columns. The latent factors (rows) were clustered using hierarchical clustering, with scipy.spatial.distance.pdist(metric = 'euclidean') to generate the distance matrix and scipy.cluster.hierarchy.linkage(method = 'ward') to generate clusters, and this matrix was plotted as a heat map.</p>
<p id="Par79">To compile a reference list of genome coordinates containing distal regulatory elements that is orthogonal to our imputed data, we downloaded P300 peak data from six ENCODE cell lines (A549, GM12878, H1, HeLa, HepG2, and K562), filtered for peaks with FDR &lt; 0.01, merged the peak files with bedtools merge to create a single reference list, and averaged genome latent factor values as in the gene model explained above for ten 200 bp bins covering 2 kb windows centered on these peaks.</p>
<p id="Par80">To validate that the patterns in the genome parameters were not due to chance, we generated the same heat map, but before averaging the bins for each gene model and P300 site we randomly permuted the order of the genome latent factors (Supplementary Fig. <xref ref-type="media" rid="MOESM1">11</xref>).</p>
</sec>
<sec id="Sec23">
<title>Comparing to ChromImpute</title>
<p id="Par81">To compare the performance of PREDICTD with ChromImpute, we downloaded the ChromImpute results from the Roadmap Epigenomics website and put them through the same pipeline as for the observed data: Convert to bedgraph, use bedtools map to calculate the mean signal over 25 bp bins, extract the bins overlapping the ENCODE Pilot Regions, apply the inverse hyperbolic sine transform, and store the tracks in a Spark RDD containing a list of scipy.sparse.csr_matrix objects.</p>
<p id="Par82">We calculated all of the quality measures on these ChromImpute datasets and plotted these results against those for PREDICTD for each experiment as a ternary scatter plot (Fig. <xref ref-type="fig" rid="Fig4">4b</xref>, Supplementary Fig. <xref ref-type="media" rid="MOESM1">14</xref>). We also averaged each element of this ChromImpute RDD with its corresponding element in the PREDICTD results, calculated the quality measures, and compared them in the same way (Fig. <xref ref-type="fig" rid="Fig4">4c</xref>). In order to compare both ChromImpute and PREDICTD to the baseline Main Effects model, we used ternary plots<sup><xref ref-type="bibr" rid="CR44">44</xref></sup> to project the three-dimensional (3D) comparison of each experiment to 2D. Each point on these ternary plots represent the relative magnitude of each dimension for that point. So, each coordinate (<italic>x</italic>, <italic>y</italic>, <italic>z</italic>) in Cartesian space is projected to a point (<italic>x</italic>′, <italic>y</italic>′, <italic>z</italic>′) such that <inline-formula id="IEq5"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$x^\prime = \frac{x}{{x + y + z}}$$\end{document}</tex-math><mml:math id="M12"><mml:msup><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>′</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>y</mml:mi><mml:mo>+</mml:mo><mml:mi>z</mml:mi></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq5.gif"></inline-graphic></alternatives></inline-formula>, <inline-formula id="IEq6"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$y^\prime = \frac{y}{{x + y + z}}$$\end{document}</tex-math><mml:math id="M14"><mml:msup><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mrow><mml:mi>′</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>y</mml:mi><mml:mo>+</mml:mo><mml:mi>z</mml:mi></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq6.gif"></inline-graphic></alternatives></inline-formula>, and <inline-formula id="IEq7"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$z^\prime = \frac{z}{{x + y + z}}$$\end{document}</tex-math><mml:math id="M16"><mml:msup><mml:mrow><mml:mi>z</mml:mi></mml:mrow><mml:mrow><mml:mi>′</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>z</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>y</mml:mi><mml:mo>+</mml:mo><mml:mi>z</mml:mi></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq7.gif"></inline-graphic></alternatives></inline-formula>. Thus, for the case where <inline-formula id="IEq8"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$x = y = z$$\end{document}</tex-math><mml:math id="M18"><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mi>y</mml:mi><mml:mo>=</mml:mo><mml:mi>z</mml:mi></mml:math><inline-graphic xlink:href="41467_2018_3635_Article_IEq8.gif"></inline-graphic></alternatives></inline-formula>, the corresponding point (<italic>x</italic>′, <italic>y</italic>′, <italic>z</italic>′) = (0.33, 0.33, 0.33) and will fall at the center of the ternary plot, while points that lie along the Cartesian axes will fall at the extreme points of the ternary plot (e.g., (<italic>x</italic>, <italic>y</italic>, <italic>z</italic>) = (1, 0, 0) = (<italic>x</italic>′, <italic>y</italic>′, <italic>z</italic>′).</p>
<p id="Par83">It is important to emphasize that the quality measure with the best PREDICTD performance, MSEglobal, is also explicitly optimized by the PREDICTD objective function during training. This shows that PREDICTD is doing well on its assigned learning task, and highlights the importance of designing an objective function that reflects the task that the model will address. As such, it should be possible to tune the objective function to perform better on other quality measures if need be. For example, in an attempt to boost PREDICTD’s performance on regions with higher signal we experimented with weighting genomic positions by ranking them by the sum of their signal level ranks in each training dataset. This provided some improvement on the MSE at the top 1% of observed signal windows measure (MSE1obs), but we ultimately decided to pursue the simpler and more balanced objective function presented here.</p>
</sec>
<sec id="Sec24">
<title>Assessing cell type-specific enhancer signatures at ncHARs</title>
<p id="Par84">We downloaded the ncHAR coordinates used in Capra et al.<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>, removed any that overlapped a protein-coding exon according to the GENCODE v19 annotations<sup><xref ref-type="bibr" rid="CR11">11</xref></sup>, and extracted all available observed and imputed data for the enhancer-associated assays H3K4me1, H3K27ac, and DNase at these regions. Some cell types were lacking observed data for H3K27ac (29) and/or DNase (74), but observed data for H3K4me1 was available in all cell types. We took the mean signal for observed experiment at each ncHAR coordinate and used that as input to the subsequent analysis.</p>
<p id="Par85">First, we extracted the first principal component of the three assays for all ncHARs and cell types using sklearn.decomposition.TruncatedSVD<sup><xref ref-type="bibr" rid="CR45">45</xref></sup> to reduce the assay dimension length from three to one and construct a matrix of ncHARs by cell types. This also had the effect of filling in missing values for the observed data. Next we wanted to cluster the ncHARs and cell types, and so we first used the matrix based on imputed data to assess how many clusters would be appropriate for the data. Briefly, for both the ncHAR and cell type dimensions, we conducted an elbow analysis by calculating the Bayesian information criterion for <italic>k</italic>-means clustering results for all values 2 &lt; = <italic>k</italic> &lt; =40, as well as a silhouette analysis on the same range of values for <italic>k</italic> (Supplementary Fig. <xref ref-type="media" rid="MOESM1">16</xref>). Based on the results, we decided that <italic>k</italic> = 5 for the ncHARs and <italic>k</italic> = 6 for cell types would give us a good balance of distance between clusters and number of clusters.</p>
<p id="Par86">Next, we clustered the imputed and observed matrices with the scikit-learn sklearn.cluster.bicluster.SpectralBiclustering class<sup><xref ref-type="bibr" rid="CR45">45</xref></sup> to generate a biclustering using six column clusters and five row clusters. And finally, we plotted the clustering results for the imputed data as a heatmap in which each cell is the inverse hyperbolic sine-transformed sum of the mean H3K4me1, H3K27ac, and DNase signals at a particular ncHAR in a particular cell type. We also plotted the tissue assignments for ncHARs with predicted developmental enhancer activity based on EnhancerFinder<sup><xref ref-type="bibr" rid="CR18">18</xref></sup> calls in the Capra et al.<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> paper alongside our ncHAR clusters (Fig. <xref ref-type="fig" rid="Fig5">5a</xref>). The same plot for the observed data is shown in Supplementary Fig. <xref ref-type="media" rid="MOESM1">17</xref>.</p>
<p id="Par87">In order to gain further insight into the genes associated with our ncHAR clusters, we extracted the genomic coordinates of the ncHARS in each cluster and input these regions to the GREAT<sup><xref ref-type="bibr" rid="CR21">21</xref></sup> to find enriched ontology terms associated with nearby genes. We used GREAT version 3.0.0 on the human hg19 assembly with the default association rule parameters (Basal + extension: 5000 bp upstream, 1000 bp downstream, 1,000,000 bp max extension, curated regulatory domains included). We first analyzed each cluster for term enrichment against a whole genome background (Supplementary Data <xref ref-type="media" rid="MOESM7">5</xref>, <xref ref-type="media" rid="MOESM8">6</xref>, <xref ref-type="media" rid="MOESM10">8</xref>, <xref ref-type="media" rid="MOESM12">10</xref>, <xref ref-type="media" rid="MOESM14">12</xref>), and then ran the test with the same parameters against the list of all ncHARs as the background (Table <xref ref-type="table" rid="Tab2">2</xref>, Supplementary Data <xref ref-type="media" rid="MOESM7">7</xref>, <xref ref-type="media" rid="MOESM11">9</xref>, <xref ref-type="media" rid="MOESM13">11</xref>). No terms were significantly enriched for cluster 0 (No Signal) or cluster 4 (Immune) when using the all ncHAR background, and so we omit these results from the supplement. When reporting the results in the main text we used the default GREAT filters for significant terms: FDR &lt; 0.05 for the hypergeometric test with at least a twofold enrichment over expected.</p>
<p id="Par88">Last, in order to compare the clustering results on the imputed data to the observed data, we used the adjusted Rand index, which assesses how often pairs of data points are put in the same or different clusters, on the ncHAR and cell type clusters independently. As negative controls, we also conducted the same clustering analysis on the observed data after shuffling the ncHARs to other noncoding coordinates (Shuffled), and after switching out the enhancer-associated marks for H3K4me3, H3K36me3, and H3K27me3, which are not associated with enhancers (Other). We compared the resulting clusters with the enhancer-associated imputed data and observed data clusters, again using the adjusted Rand index. Last, we used the adjusted Rand index once more to assess the similarity of our biclustering results to the grouping of ncHARs based on predicted tissue-specific developmental enhancer activity from Capra et al.<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> (Fig. <xref ref-type="fig" rid="Fig5">5b</xref>).</p>
</sec>
<sec id="Sec25">
<title>Code availability</title>
<p id="Par89">The PREDICTD code base is open source and made available through the MIT License. All code and documentation required to run PREDICTD, including tutorials and command line usage, are available through the PREDICTD repository hosted on BitBucket: <ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/noblelab/predictd">https://bitbucket.org/noblelab/predictd</ext-link>.</p>
</sec>
<sec id="Sec26">
<title>Data availability</title>
<p id="Par90">
<list list-type="bullet"><list-item><p id="Par91">The Roadmap Epigenomics Consolidated Data are available through the project data portal, <ext-link ext-link-type="uri" xlink:href="http://egg2.wustl.edu/roadmap/web_portal/processed_data.html#ChipSeq_DNaseSeq">http://egg2.wustl.edu/roadmap/web_portal/processed_data.html#ChipSeq_DNaseSeq</ext-link>.</p></list-item><list-item><p id="Par92">ChromImpute datasets are also available through the Roadmap Epigenomics project data portal, <ext-link ext-link-type="uri" xlink:href="http://egg2.wustl.edu/roadmap/web_portal/imputed.html#imp_sig">http://egg2.wustl.edu/roadmap/web_portal/imputed.html#imp_sig</ext-link>.</p></list-item><list-item><p id="Par93">All imputed data generated for this paper are available through the ENCODE project portal, <ext-link ext-link-type="uri" xlink:href="https://www.encodeproject.org/">https://www.encodeproject.org/</ext-link>, and the list of accession IDs is provided in the Supplementary Data <xref ref-type="media" rid="MOESM19">17</xref>.xlsx file associated with this manuscript.</p></list-item><list-item><p id="Par94">The Amazon Machine Image for running the PREDICTD software, along with the associated reference data files, are hosted on AWS. The download locations are provided in the documentation with the PREDICTD code (see the code availability statement above).</p></list-item><list-item><p id="Par95">Data for the quality measures reported for PREDICTD in Figs. <xref ref-type="fig" rid="Fig2">2b</xref> and <xref ref-type="fig" rid="Fig4">4</xref>, and Supplementary Figs. <xref ref-type="media" rid="MOESM1">2</xref>, <xref ref-type="media" rid="MOESM1">14</xref>, and <xref ref-type="media" rid="MOESM1">15</xref> are provided in Supplementary Data, as are the results from the GREAT analysis of ncHAR clusters (see Supplementary Information).</p></list-item></list>
</p>
</sec>
</sec>
<sec sec-type="supplementary-material">
<title>Electronic supplementary material</title>
<sec id="Sec27">
<p>
<supplementary-material content-type="local-data" id="MOESM1"><media xlink:href="41467_2018_3635_MOESM1_ESM.pdf"><caption><p>Supplementary Information(PDF 14720 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM2"><media xlink:href="41467_2018_3635_MOESM2_ESM.pdf"><caption><p>Peer Review File(PDF 9010 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM3"><media xlink:href="41467_2018_3635_MOESM3_ESM.xlsx"><caption><p>Supplementary Dataset 1(XLSX 13 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM4"><media xlink:href="41467_2018_3635_MOESM4_ESM.xlsx"><caption><p>Supplementary Dataset 2(XLSX 12 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM5"><media xlink:href="41467_2018_3635_MOESM5_ESM.xlsx"><caption><p>Supplementary Dataset 3(XLSX 163 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM6"><media xlink:href="41467_2018_3635_MOESM6_ESM.xlsx"><caption><p>Supplementary Dataset 4(XLSX 11 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM7"><media xlink:href="41467_2018_3635_MOESM7_ESM.xlsx"><caption><p>Supplementary Dataset 5(XLSX 1775 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM8"><media xlink:href="41467_2018_3635_MOESM8_ESM.xlsx"><caption><p>Supplementary Dataset 6(XLSX 1336 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM9"><media xlink:href="41467_2018_3635_MOESM9_ESM.xlsx"><caption><p>Supplementary Dataset 7(XLSX 1700 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM10"><media xlink:href="41467_2018_3635_MOESM10_ESM.xlsx"><caption><p>Supplementary Dataset 8(XLSX 1250 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM11"><media xlink:href="41467_2018_3635_MOESM11_ESM.xlsx"><caption><p>Supplementary Dataset 9(XLSX 1717 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM12"><media xlink:href="41467_2018_3635_MOESM12_ESM.xlsx"><caption><p>Supplementary Dataset 10(XLSX 910 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM13"><media xlink:href="41467_2018_3635_MOESM13_ESM.xlsx"><caption><p>Supplementary Dataset 11(XLSX 1410 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM14"><media xlink:href="41467_2018_3635_MOESM14_ESM.xlsx"><caption><p>Supplementary Dataset 12(XLSX 872 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM15"><media xlink:href="41467_2018_3635_MOESM15_ESM.xlsx"><caption><p>Supplementary Dataset 13(XLSX 189 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM16"><media xlink:href="41467_2018_3635_MOESM16_ESM.xlsx"><caption><p>Supplementary Dataset 14(XLSX 188 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM17"><media xlink:href="41467_2018_3635_MOESM17_ESM.xlsx"><caption><p>Supplementary Dataset 15(XLSX 187 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM18"><media xlink:href="41467_2018_3635_MOESM18_ESM.xlsx"><caption><p>Supplementary Dataset 16(XLSX 187 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM19"><media xlink:href="41467_2018_3635_MOESM19_ESM.xlsx"><caption><p>Supplementary Dataset 17(XLSX 118 kb)</p></caption></media></supplementary-material>
<supplementary-material content-type="local-data" id="MOESM20"><media xlink:href="41467_2018_3635_MOESM20_ESM.pdf"><caption><p>Description of Additional Supplementary Files(PDF 179 kb)</p></caption></media></supplementary-material>
</p>
</sec>
</sec>
</body>
<back>
<fn-group>
<fn>
<p><bold>Publisher's note:</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
</fn>
<fn>
<p><bold>Supplementary Information</bold> accompanies this paper at 10.1038/s41467-018-03635-9.</p>
</fn>
</fn-group>
<ack>
<title>Acknowledgements</title>
<p>We gratefully acknowledge support from the Amazon Web Services Cloud Credits for Research program and Microsoft Azure for Research program for providing computing cycles to help with the development of PREDICTD. We would also like to thank Dr. Rob Fatland and the UW High Performance Computing Club for assistance with the cloud computing aspects of our project and for granting us additional Amazon Web Services credits. This work was funded by National Institutes of Health awards R01 ES024917 and U41 HG007000.</p>
</ack>
<notes notes-type="author-contribution">
<title>Author contributions</title>
<p>W.S.N., J.J.H., and J.B. conceived the tensor decomposition approach for data imputation. T.J.D. implemented PREDICTD, executed all analyses, including designing and executing the model evaluation and noncoding human accelerated region analyses, and wrote the manuscript. W.S.N., J.B., M.W.L., and J.J.H. provided essential input on the mathematical and machine learning components of the project, along with additional critical feedback throughout the publication and review process. All authors read and approved the final manuscript.</p>
</notes>
<notes notes-type="COI-statement">
<sec id="FPar1">
<title>Competing interests</title>
<p id="Par96">The authors declare no competing interests.</p>
</sec>
</notes>
<ref-list id="Bib1">
<title>References</title>
<ref id="CR1">
<label>1.</label>
<mixed-citation publication-type="other">ENCODE Project Consortium. An integrated encyclopedia of DNA elements in the human genome. <italic>Nature</italic><bold>489</bold>, 57–74 (2012).</mixed-citation>
</ref>
<ref id="CR2">
<label>2.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<collab>Roadmap Epigenomics Consortium.</collab>
<etal></etal>
</person-group>
<article-title>Integrative analysis of 111 reference human epigenomes</article-title>
<source/>Nature
          <year>2015</year>
<volume>518</volume>
<fpage>317</fpage>
<lpage>330</lpage>
<pub-id pub-id-type="doi">10.1038/nature14248</pub-id>
<pub-id pub-id-type="pmid">25693563</pub-id>
</element-citation>
</ref>
<ref id="CR3">
<label>3.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Hoffman</surname>
<given-names>MM</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Integrative annotation of chromatin elements from ENCODE data</article-title>
<source/>Nucleic Acids Res.
          <year>2013</year>
<volume>41</volume>
<fpage>827</fpage>
<lpage>841</lpage>
<pub-id pub-id-type="doi">10.1093/nar/gks1284</pub-id>
<pub-id pub-id-type="pmid">23221638</pub-id>
</element-citation>
</ref>
<ref id="CR4">
<label>4.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Ernst</surname>
<given-names>J</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Systematic analysis of chromatin state dynamics in nine human cell types</article-title>
<source/>Nature
          <year>2011</year>
<volume>473</volume>
<fpage>43</fpage>
<lpage>49</lpage>
<pub-id pub-id-type="doi">10.1038/nature09906</pub-id>
<pub-id pub-id-type="pmid">21441907</pub-id>
</element-citation>
</ref>
<ref id="CR5">
<label>5.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Neph</surname>
<given-names>S</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Circuitry and dynamics of human transcription factor regulatory networks</article-title>
<source/>Cell
          <year>2012</year>
<volume>150</volume>
<fpage>1274</fpage>
<lpage>1286</lpage>
<pub-id pub-id-type="doi">10.1016/j.cell.2012.04.040</pub-id>
<pub-id pub-id-type="pmid">22959076</pub-id>
</element-citation>
</ref>
<ref id="CR6">
<label>6.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Wei</surname>
<given-names>K</given-names>
</name>
<name>
<surname>Libbrecht</surname>
<given-names>MW</given-names>
</name>
<name>
<surname>Bilmes</surname>
<given-names>JA</given-names>
</name>
<name>
<surname>Noble</surname>
<given-names>WS</given-names>
</name>
</person-group>
<article-title>Choosing panels of genomics assays using submodular optimization</article-title>
<source/>Genome Biol.
          <year>2016</year>
<volume>17</volume>
<fpage>229</fpage>
<pub-id pub-id-type="doi">10.1186/s13059-016-1089-7</pub-id>
<pub-id pub-id-type="pmid">27846892</pub-id>
</element-citation>
</ref>
<ref id="CR7">
<label>7.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Ernst</surname>
<given-names>J</given-names>
</name>
<name>
<surname>Kellis</surname>
<given-names>M</given-names>
</name>
</person-group>
<article-title>Large-scale imputation of epigenomic datasets for systematic annotation of diverse human tissues</article-title>
<source/>Nat. Biotechnol.
          <year>2015</year>
<volume>33</volume>
<fpage>364</fpage>
<lpage>376</lpage>
<pub-id pub-id-type="doi">10.1038/nbt.3157</pub-id>
<pub-id pub-id-type="pmid">25690853</pub-id>
</element-citation>
</ref>
<ref id="CR8">
<label>8.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Harshman</surname>
<given-names>RA</given-names>
</name>
</person-group>
<article-title>Foundations of the PARAFAC procedure: models and conditions for an “explanatory” multi-modal factor analysis</article-title>
<source/>UCLA Working Papers in Phonetics
          <year>1970</year>
<volume>16</volume>
<fpage>1</fpage>
<lpage>84</lpage>
</element-citation>
</ref>
<ref id="CR9">
<label>9.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Carroll</surname>
<given-names>JD</given-names>
</name>
<name>
<surname>Chang</surname>
<given-names>JJ</given-names>
</name>
</person-group>
<article-title>Analysis of individual differences in multidimensional scaling via an n-way generalization of Eckart-Young decomposition</article-title>
<source/>Psychometrika
          <year>1970</year>
<volume>35</volume>
<fpage>283</fpage>
<lpage>319</lpage>
<pub-id pub-id-type="doi">10.1007/BF02310791</pub-id>
</element-citation>
</ref>
<ref id="CR10">
<label>10.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Capra</surname>
<given-names>JA</given-names>
</name>
<name>
<surname>Erwin</surname>
<given-names>GD</given-names>
</name>
<name>
<surname>McKinsey</surname>
<given-names>G</given-names>
</name>
<name>
<surname>Rubenstein</surname>
<given-names>JLR</given-names>
</name>
<name>
<surname>Pollard</surname>
<given-names>KS</given-names>
</name>
</person-group>
<article-title>Many human accelerated regions are developmental enhancers</article-title>
<source/>Philos. Trans. R Soc. Lond. B Biol. Sci.
          <year>2013</year>
<volume>368</volume>
<fpage>20130025</fpage>
<lpage>20130025</lpage>
<pub-id pub-id-type="doi">10.1098/rstb.2013.0025</pub-id>
<pub-id pub-id-type="pmid">24218637</pub-id>
</element-citation>
</ref>
<ref id="CR11">
<label>11.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Harrow</surname>
<given-names>J</given-names>
</name>
<etal></etal>
</person-group>
<article-title>GENCODE: the reference human genome annotation for the ENCODE Project</article-title>
<source/>Genome Res.
          <year>2012</year>
<volume>22</volume>
<fpage>1760</fpage>
<lpage>1774</lpage>
<pub-id pub-id-type="doi">10.1101/gr.135350.111</pub-id>
<pub-id pub-id-type="pmid">22955987</pub-id>
</element-citation>
</ref>
<ref id="CR12">
<label>12.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Visel</surname>
<given-names>A</given-names>
</name>
<etal></etal>
</person-group>
<article-title>ChIP-seq accurately predicts tissue-specific activity of enhancers</article-title>
<source/>Nature
          <year>2009</year>
<volume>457</volume>
<fpage>854</fpage>
<lpage>858</lpage>
<pub-id pub-id-type="doi">10.1038/nature07730</pub-id>
<pub-id pub-id-type="pmid">19212405</pub-id>
</element-citation>
</ref>
<ref id="CR13">
<label>13.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Hubisz</surname>
<given-names>MJ</given-names>
</name>
<name>
<surname>Pollard</surname>
<given-names>KS</given-names>
</name>
</person-group>
<article-title>Exploring the genesis and functions of human accelerated regions sheds light on their role in human evolution</article-title>
<source/>Curr. Opin. Genet. Dev.
          <year>2014</year>
<volume>29</volume>
<fpage>15</fpage>
<lpage>21</lpage>
<pub-id pub-id-type="doi">10.1016/j.gde.2014.07.005</pub-id>
<pub-id pub-id-type="pmid">25156517</pub-id>
</element-citation>
</ref>
<ref id="CR14">
<label>14.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>King</surname>
<given-names>MC</given-names>
</name>
<name>
<surname>Wilson</surname>
<given-names>AC</given-names>
</name>
</person-group>
<article-title>Evolution at two levels in humans and chimpanzees</article-title>
<source/>Science
          <year>1975</year>
<volume>188</volume>
<fpage>107</fpage>
<lpage>116</lpage>
<pub-id pub-id-type="doi">10.1126/science.1090005</pub-id>
<pub-id pub-id-type="pmid">1090005</pub-id>
</element-citation>
</ref>
<ref id="CR15">
<label>15.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Prabhakar</surname>
<given-names>S</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Human-specific gain of function in a developmental enhancer</article-title>
<source/>Science
          <year>2008</year>
<volume>321</volume>
<fpage>1346</fpage>
<lpage>1350</lpage>
<pub-id pub-id-type="doi">10.1126/science.1159974</pub-id>
<pub-id pub-id-type="pmid">18772437</pub-id>
</element-citation>
</ref>
<ref id="CR16">
<label>16.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Kamm</surname>
<given-names>GB</given-names>
</name>
<name>
<surname>Pisciottano</surname>
<given-names>F</given-names>
</name>
<name>
<surname>Kliger</surname>
<given-names>R</given-names>
</name>
<name>
<surname>Franchini</surname>
<given-names>LF</given-names>
</name>
</person-group>
<article-title>The developmental brain gene NPAS3 contains the largest number of accelerated regulatory sequences in the human genome</article-title>
<source/>Mol. Biol. Evol.
          <year>2013</year>
<volume>30</volume>
<fpage>1088</fpage>
<lpage>1102</lpage>
<pub-id pub-id-type="doi">10.1093/molbev/mst023</pub-id>
<pub-id pub-id-type="pmid">23408798</pub-id>
</element-citation>
</ref>
<ref id="CR17">
<label>17.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Oksenberg</surname>
<given-names>N</given-names>
</name>
<name>
<surname>Stevison</surname>
<given-names>L</given-names>
</name>
<name>
<surname>Wall</surname>
<given-names>JD</given-names>
</name>
<name>
<surname>Ahituv</surname>
<given-names>N</given-names>
</name>
</person-group>
<article-title>Function and regulation of AUTS2, a gene implicated in autism and human evolution</article-title>
<source/>PLoS Genet.
          <year>2013</year>
<volume>9</volume>
<fpage>e1003221</fpage>
<pub-id pub-id-type="doi">10.1371/journal.pgen.1003221</pub-id>
<pub-id pub-id-type="pmid">23349641</pub-id>
</element-citation>
</ref>
<ref id="CR18">
<label>18.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Erwin</surname>
<given-names>GD</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Integrating diverse datasets improves developmental enhancer prediction</article-title>
<source/>PLoS Comput. Biol.
          <year>2014</year>
<volume>10</volume>
<fpage>e1003677</fpage>
<pub-id pub-id-type="doi">10.1371/journal.pcbi.1003677</pub-id>
<pub-id pub-id-type="pmid">24967590</pub-id>
</element-citation>
</ref>
<ref id="CR19">
<label>19.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Pickard</surname>
<given-names>BS</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Interacting haplotypes at the NPAS3 locus alter risk of schizophrenia and bipolar disorder</article-title>
<source/>Mol. Psychiatry
          <year>2008</year>
<volume>14</volume>
<fpage>874</fpage>
<lpage>884</lpage>
<pub-id pub-id-type="doi">10.1038/mp.2008.24</pub-id>
<pub-id pub-id-type="pmid">18317462</pub-id>
</element-citation>
</ref>
<ref id="CR20">
<label>20.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Visel</surname>
<given-names>A</given-names>
</name>
<name>
<surname>Minovitsky</surname>
<given-names>S</given-names>
</name>
<name>
<surname>Dubchak</surname>
<given-names>I</given-names>
</name>
<name>
<surname>Pennacchio</surname>
<given-names>LA</given-names>
</name>
</person-group>
<article-title>VISTA Enhancer Browsera database of tissue-specific human enhancers</article-title>
<source/>Nucleic Acids Res.
          <year>2007</year>
<volume>35</volume>
<fpage>D88</fpage>
<lpage>D92</lpage>
<pub-id pub-id-type="doi">10.1093/nar/gkl822</pub-id>
<pub-id pub-id-type="pmid">17130149</pub-id>
</element-citation>
</ref>
<ref id="CR21">
<label>21.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>McLean</surname>
<given-names>CY</given-names>
</name>
<etal></etal>
</person-group>
<article-title>GREAT improves functional interpretation of cis-regulatory regions</article-title>
<source/>Nat. Biotechnol.
          <year>2010</year>
<volume>28</volume>
<fpage>495</fpage>
<lpage>501</lpage>
<pub-id pub-id-type="doi">10.1038/nbt.1630</pub-id>
<pub-id pub-id-type="pmid">20436461</pub-id>
</element-citation>
</ref>
<ref id="CR22">
<label>22.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Bro</surname>
<given-names>R</given-names>
</name>
</person-group>
<article-title>PARAFAC. Tutorial and applications</article-title>
<source/>Chemom. Intell. Lab. Syst.
          <year>1997</year>
<volume>38</volume>
<fpage>149</fpage>
<lpage>171</lpage>
<pub-id pub-id-type="doi">10.1016/S0169-7439(97)00032-4</pub-id>
</element-citation>
</ref>
<ref id="CR23">
<label>23.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Kolda</surname>
<given-names>TG</given-names>
</name>
<name>
<surname>Bader</surname>
<given-names>BW</given-names>
</name>
</person-group>
<article-title>Tensor decompositions and applications</article-title>
<source/>SIAM Rev.
          <year>2009</year>
<volume>51</volume>
<fpage>455</fpage>
<lpage>500</lpage>
<pub-id pub-id-type="doi">10.1137/07070111X</pub-id>
</element-citation>
</ref>
<ref id="CR24">
<label>24.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Luo</surname>
<given-names>Y</given-names>
</name>
<name>
<surname>Wang</surname>
<given-names>F</given-names>
</name>
<name>
<surname>Szolovits</surname>
<given-names>P</given-names>
</name>
</person-group>
<article-title>Tensor factorization toward precision medicine</article-title>
<source/>Brief. Bioinform.
          <year>2017</year>
<volume>18</volume>
<fpage>511</fpage>
<lpage>514</lpage>
<pub-id pub-id-type="doi">10.1093/bib/bbx048</pub-id>
<pub-id pub-id-type="pmid">26994614</pub-id>
</element-citation>
</ref>
<ref id="CR25">
<label>25.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Zhu</surname>
<given-names>Y</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Constructing 3d interaction maps from 1d epigenomes</article-title>
<source/>Nat. Commun.
          <year>2016</year>
<volume>7</volume>
<fpage>10812</fpage>
<pub-id pub-id-type="doi">10.1038/ncomms10812</pub-id>
<pub-id pub-id-type="pmid">26960733</pub-id>
</element-citation>
</ref>
<ref id="CR26">
<label>26.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Hore</surname>
<given-names>V</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Tensor decomposition for multiple-tissue gene expression experiments</article-title>
<source/>Nat. Genet.
          <year>2016</year>
<volume>48</volume>
<fpage>1094</fpage>
<lpage>1100</lpage>
<pub-id pub-id-type="doi">10.1038/ng.3624</pub-id>
<pub-id pub-id-type="pmid">27479908</pub-id>
</element-citation>
</ref>
<ref id="CR27">
<label>27.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Acar</surname>
<given-names>E</given-names>
</name>
<name>
<surname>Dunlavy</surname>
<given-names>DM</given-names>
</name>
<name>
<surname>Kolda</surname>
<given-names>TG</given-names>
</name>
<name>
<surname>Mrup</surname>
<given-names>M</given-names>
</name>
</person-group>
<article-title>Scalable tensor factorizations for incomplete data</article-title>
<source/>Chemom. Intell. Lab. Syst.
          <year>2011</year>
<volume>106</volume>
<fpage>41</fpage>
<lpage>56</lpage>
<pub-id pub-id-type="doi">10.1016/j.chemolab.2010.08.004</pub-id>
</element-citation>
</ref>
<ref id="CR28">
<label>28.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Koren</surname>
<given-names>Y</given-names>
</name>
<name>
<surname>Bell</surname>
<given-names>R</given-names>
</name>
<name>
<surname>Volinsky</surname>
<given-names>C</given-names>
</name>
</person-group>
<article-title>Matrix factorization techniques for recommender systems</article-title>
<source/>IEEE Comput.
          <year>2009</year>
<volume>42</volume>
<fpage>30</fpage>
<lpage>37</lpage>
<pub-id pub-id-type="doi">10.1109/MC.2009.263</pub-id>
</element-citation>
</ref>
<ref id="CR29">
<label>29.</label>
<mixed-citation publication-type="other">Datta, V., Siddharthan, R. &amp; Krishna, S. Detection of cooperatively bound transcription factor pairs using ChIP-seq peak intensities and expectation maximization. Preprint at <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/early/2018/01/16/120113">https://www.biorxiv.org/content/early/2018/01/16/120113</ext-link> (2017).</mixed-citation>
</ref>
<ref id="CR30">
<label>30.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Cremona</surname>
<given-names>MA</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Peak shape clustering reveals biological insights</article-title>
<source/>BMC Bioinformatics
          <year>2015</year>
<volume>16</volume>
<fpage>349</fpage>
<pub-id pub-id-type="doi">10.1186/s12859-015-0787-6</pub-id>
<pub-id pub-id-type="pmid">26511446</pub-id>
</element-citation>
</ref>
<ref id="CR31">
<label>31.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Schweikert</surname>
<given-names>G</given-names>
</name>
<name>
<surname>Cseke</surname>
<given-names>B</given-names>
</name>
<name>
<surname>Clouaire</surname>
<given-names>T</given-names>
</name>
<name>
<surname>Bird</surname>
<given-names>A</given-names>
</name>
<name>
<surname>Sanguinetti</surname>
<given-names>G</given-names>
</name>
</person-group>
<article-title>MMDiff: quantitative testing for shape changes in ChIP-Seq data sets</article-title>
<source/>BMC Genomics
          <year>2013</year>
<volume>14</volume>
<fpage>826</fpage>
<pub-id pub-id-type="doi">10.1186/1471-2164-14-826</pub-id>
<pub-id pub-id-type="pmid">24267901</pub-id>
</element-citation>
</ref>
<ref id="CR32">
<label>32.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Benveniste</surname>
<given-names>D</given-names>
</name>
<name>
<surname>Sonntag</surname>
<given-names>HJ</given-names>
</name>
<name>
<surname>Sanguinetti</surname>
<given-names>G</given-names>
</name>
<name>
<surname>Sproul</surname>
<given-names>D</given-names>
</name>
</person-group>
<article-title>Transcription factor binding predicts histone modifications in human cell lines</article-title>
<source/>Proc. Natl Acad. Sci. USA
          <year>2014</year>
<volume>111</volume>
<fpage>13367</fpage>
<lpage>13372</lpage>
<pub-id pub-id-type="doi">10.1073/pnas.1412081111</pub-id>
<pub-id pub-id-type="pmid">25187560</pub-id>
</element-citation>
</ref>
<ref id="CR33">
<label>33.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Whitaker</surname>
<given-names>JW</given-names>
</name>
<name>
<surname>Chen</surname>
<given-names>Z</given-names>
</name>
<name>
<surname>Wang</surname>
<given-names>W</given-names>
</name>
</person-group>
<article-title>Predicting the human epigenome from DNA motifs</article-title>
<source/>Nat. Methods
          <year>2015</year>
<volume>12</volume>
<fpage>265</fpage>
<lpage>272</lpage>
<pub-id pub-id-type="doi">10.1038/nmeth.3065</pub-id>
<pub-id pub-id-type="pmid">25240437</pub-id>
</element-citation>
</ref>
<ref id="CR34">
<label>34.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Zhou</surname>
<given-names>J</given-names>
</name>
<name>
<surname>Troyanskaya</surname>
<given-names>OG</given-names>
</name>
</person-group>
<article-title>Predicting effects of noncoding variants with deep learning-based sequence model</article-title>
<source/>Nat. Methods
          <year>2015</year>
<volume>12</volume>
<fpage>931</fpage>
<lpage>934</lpage>
<pub-id pub-id-type="doi">10.1038/nmeth.3547</pub-id>
<pub-id pub-id-type="pmid">26301843</pub-id>
</element-citation>
</ref>
<ref id="CR35">
<label>35.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Hoffman</surname>
<given-names>MM</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Unsupervised pattern discovery in human chromatin structure through genomic segmentation</article-title>
<source/>Nat. Methods
          <year>2012</year>
<volume>9</volume>
<fpage>473</fpage>
<lpage>476</lpage>
<pub-id pub-id-type="doi">10.1038/nmeth.1937</pub-id>
<pub-id pub-id-type="pmid">22426492</pub-id>
</element-citation>
</ref>
<ref id="CR36">
<label>36.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Quinlan</surname>
<given-names>AR</given-names>
</name>
<name>
<surname>Hall</surname>
<given-names>IM</given-names>
</name>
</person-group>
<article-title>BEDTools: a flexible suite of utilities for comparing genomic features</article-title>
<source/>Bioinformatics
          <year>2010</year>
<volume>26</volume>
<fpage>841</fpage>
<lpage>842</lpage>
<pub-id pub-id-type="doi">10.1093/bioinformatics/btq033</pub-id>
<pub-id pub-id-type="pmid">20110278</pub-id>
</element-citation>
</ref>
<ref id="CR37">
<label>37.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Zinkevich</surname>
<given-names>M</given-names>
</name>
<name>
<surname>Weimer</surname>
<given-names>M</given-names>
</name>
<name>
<surname>Li</surname>
<given-names>L</given-names>
</name>
<name>
<surname>Smola</surname>
<given-names>AJ</given-names>
</name>
</person-group>
<article-title>Parallelized stochastic gradient descent</article-title>
<source/>Adv. Neural Inf. Process. Syst.
          <year>2010</year>
<volume>23</volume>
<fpage>2595</fpage>
<lpage>2603</lpage>
</element-citation>
</ref>
<ref id="CR38">
<label>38.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Kingma</surname>
<given-names>D</given-names>
</name>
<name>
<surname>Ba</surname>
<given-names>J</given-names>
</name>
</person-group>
<article-title>Adam: a method for stochastic optimization</article-title>
<source/>Proceedings of the 3rd International Conference on Learning Representations (ICLR 2015)
          <year>2015</year>
<volume>3</volume>
<fpage>1</fpage>
<lpage>15</lpage>
</element-citation>
</ref>
<ref id="CR39">
<label>39.</label>
<mixed-citation publication-type="other">Dozat, T. <italic>Incorporating Nesterov Momentum into Adam</italic>. Technical Report (Stanford University). Preprint at: <ext-link ext-link-type="uri" xlink:href="http://cs229.stanford.edu/proj2015/054_report.pdf">http://cs229.stanford.edu/proj2015/054_report.pdf</ext-link> (2015).</mixed-citation>
</ref>
<ref id="CR40">
<label>40.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Walt</surname>
<given-names>S. van der</given-names>
</name>
<name>
<surname>Colbert</surname>
<given-names>SC</given-names>
</name>
<name>
<surname>Varoquaux</surname>
<given-names>G</given-names>
</name>
</person-group>
<article-title>The NumPy array: a structure for efficient numerical computation</article-title>
<source/>Computing in Science Engineering
          <year>2011</year>
<volume>13</volume>
<fpage>22</fpage>
<lpage>30</lpage>
<pub-id pub-id-type="doi">10.1109/MCSE.2011.37</pub-id>
</element-citation>
</ref>
<ref id="CR41">
<label>41.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Bergstra</surname>
<given-names>J</given-names>
</name>
<name>
<surname>Bengio</surname>
<given-names>Y</given-names>
</name>
</person-group>
<article-title>Random search for hyper-parameter optimization</article-title>
<source/>J. Mach. Learn. Res.
          <year>2012</year>
<volume>13</volume>
<fpage>281</fpage>
<lpage>305</lpage>
</element-citation>
</ref>
<ref id="CR42">
<label>42.</label>
<mixed-citation publication-type="other">Snoek, J., Larochelle, H. &amp; Adams, R. P. Practical bayesian optimization of machine learning algorithms. <italic>Adv</italic>. <italic>Neural</italic><italic>Inf</italic>. <italic>Process</italic>. <italic>Syst</italic>., 2951–2959 (2012).</mixed-citation>
</ref>
<ref id="CR43">
<label>43.</label>
<mixed-citation publication-type="other">Recht, B. <italic>The News on Auto-tuning</italic><ext-link ext-link-type="uri" xlink:href="http://benjamin-recht.github.io/%202016/06/20/hypertuning/">http://benjamin-recht.github.io/ 2016/06/20/hypertuning/</ext-link> (2016).</mixed-citation>
</ref>
<ref id="CR44">
<label>44.</label>
<mixed-citation publication-type="other">Harper, M. et al. python-ternary: ternary plots in Python. <italic>Zenodo</italic>. 10.5281/zenodo.594435 (2017)</mixed-citation>
</ref>
<ref id="CR45">
<label>45.</label>
<element-citation publication-type="journal">
<person-group person-group-type="author">
<name>
<surname>Pedregosa</surname>
<given-names>F</given-names>
</name>
<etal></etal>
</person-group>
<article-title>Scikit-learn: machine learning in Python</article-title>
<source/>J. Mach. Learn. Res.
          <year>2011</year>
<volume>12</volume>
<fpage>2825</fpage>
<lpage>2830</lpage>
</element-citation>
</ref>
</ref-list>
</back>
</article>
</pmc-articleset>